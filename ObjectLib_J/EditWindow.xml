<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>_XX2</ID>
<x0>386</x0>
<y0>202</y0>
<width>167</width>
<height>184</height>
<ID_maker>156</ID_maker>
<objectname>EditWindow</objectname>
<description></description>
<aobject>
<ID>_AX9</ID>
<x0>393</x0>
<y0>93</y0>
<width>163</width>
<height>148</height>
<ID_maker>47</ID_maker>
<objectname>GraphicPanel</objectname>
<description>グラフィックパネル
</description>
<action>
<ID>_AX44</ID>
<comp1name>_PX43</comp1name>
<comp2name>_OX42</comp2name>
</action>
<action>
<ID>_AX41</ID>
<comp1name>_PX40</comp1name>
<comp2name>_OX39</comp2name>
</action>
<action>
<ID>_AX27</ID>
<comp1name>_OX24</comp1name>
<comp2name>_PX3</comp2name>
</action>
<action>
<ID>_AX26</ID>
<comp1name>_PX25</comp1name>
<comp2name>_OX24</comp2name>
</action>
<codeclip>
<ID>_CX18</ID>
<x0>36</x0>
<y0>0</y0>
<width>352</width>
<height>19</height>
<codetext>PlanePanel panel;//単純なパネル(MouseListenerを実装する)
class PlanePanel extends JPanel implements MouseListener{
PlanePanel(){
addMouseListener(this);
}
public void mousePressed(MouseEvent e){ PressAt(e.getX(),e.getY());}
public void mouseReleased(MouseEvent e){}
public void mouseClicked(MouseEvent e){}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
}
</codetext>
</codeclip>
<operation>
<ID>_OX39</ID>
<state1>_SX45</state1>
<state2>_SX45</state2>
<x0>241</x0>
<y0>197</y0>
<width>137</width>
<height>80</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>2</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>2</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>41</inpinx0>
<inpiny0>58</inpiny0>
<inpinwidth>96</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
自分に加える</description>
<codetext>panel.add(c,0);
panel.getLayout().removeLayoutComponent(c);
</codetext>
</operation>
<operation>
<ID>_OX24</ID>
<state1>_SX23</state1>
<state2>_SX45</state2>
<x0>0</x0>
<y0>207</y0>
<width>146</width>
<height>69</height>
<inconnectx0>48</inconnectx0>
<inconnecty0>1</inconnecty0>
<outconnectx0>126</outconnectx0>
<outconnecty0>5</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Container c)</outpintext>
<outpinx0>39</outpinx0>
<outpiny0>48</outpiny0>
<outpinwidth>107</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>上位コンポーネントに
自分を加える</description>
<codetext>c=panel;
</codetext>
</operation>
<operation>
<ID>_OX6</ID>
<state1>_SINIT</state1>
<state2>_SX23</state2>
<x0>0</x0>
<y0>80</y0>
<width>123</width>
<height>40</height>
<inconnectx0>48</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>48</outconnectx0>
<outconnecty0>23</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>69</outpiny0>
<outpinwidth>120</outpinwidth>
<outpinheight>22</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>変数を初期化する</description>
<codetext>BorderLayout layout;
panel = new PlanePanel();
layout = new BorderLayout();
panel.setLayout(layout);
layout.invalidateLayout(panel);
panel.setBackground(Color.lightGray);
panel.setPreferredSize(new Dimension(width,height));
</codetext>
</operation>
<operation>
<ID>_OX42</ID>
<state1>_SX45</state1>
<state2>_SX45</state2>
<x0>245</x0>
<y0>52</y0>
<width>130</width>
<height>90</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>31</inpinx0>
<inpiny0>71</inpiny0>
<inpinwidth>99</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
削除する</description>
<codetext>panel.remove(c);
panel.repaint();
</codetext>
</operation>
<pin>
<ID>_PX40</ID>
<x0>454</x0>
<y0>251</y0>
<width>113</width>
<height>30</height>
<text>add(Component c)</text>
<px>20</px>
<py>49</py>
</pin>
<pin>
<ID>_PX25</ID>
<x0>3</x0>
<y0>295</y0>
<width>46</width>
<height>28</height>
<text>Start()</text>
<px>120</px>
<py>70</py>
</pin>
<pin>
<ID>_PX4</ID>
<x0>388</x0>
<y0>0</y0>
<width>107</width>
<height>19</height>
<text>PressAt(int x,int y)</text>
<px>14</px>
<py>31</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>81</x0>
<y0>295</y0>
<width>102</width>
<height>28</height>
<text>Join(Container c)</text>
<px>27</px>
<py>112</py>
</pin>
<pin>
<ID>_PX43</ID>
<x0>431</x0>
<y0>122</y0>
<width>135</width>
<height>21</height>
<text>remove(Component c)</text>
<px>13</px>
<py>98</py>
</pin>
<state>
<ID>_SX23</ID>
<x0>26</x0>
<y0>141</y0>
<width>63</width>
<height>37</height>
<text>    状態１</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>22</x0>
<y0>23</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX45</ID>
<x0>158</x0>
<y0>138</y0>
<width>70</width>
<height>40</height>
<text>   待機状態</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<aobject>
<ID>_A67</ID>
<x0>393</x0>
<y0>249</y0>
<width>191</width>
<height>68</height>
<ID_maker>28</ID_maker>
<objectname>Window</objectname>
<description>JAVAのJFrameウィンドウ</description>
<action>
<ID>_A27</ID>
<comp1name>_OX5</comp1name>
<comp2name>_P26</comp2name>
</action>
<action>
<ID>_AX8</ID>
<comp1name>_PX2</comp1name>
<comp2name>_OX5</comp2name>
</action>
<codeclip>
<ID>_CX9</ID>
<x0>1</x0>
<y0>0</y0>
<width>275</width>
<height>23</height>
<codetext>Window0 window;//ウィンドウのインスタンス
Container container;//ウィンドウの表示領域
class Window0 extends JFrame implements WindowListener{
Window0(){
setTitle(&quot;NoTitle&quot;);
addWindowListener(this);
}
public void windowActivated(WindowEvent e){ Activated(); }
public void windowClosed(WindowEvent e){ Closed(); }
public void windowClosing(WindowEvent e){ Closing(); }
public void windowDeactivated(WindowEvent e){ Deactivated(); }
public void windowDeiconified(WindowEvent e){ Deiconfied(); }
public void windowIconified(WindowEvent e){ Iconfied(); }
public void windowOpened(WindowEvent e){ Opened(); }
}
</codetext>
</codeclip>
<operation>
<ID>_OX4</ID>
<state1>_SINIT</state1>
<state2>_SX3</state2>
<x0>51</x0>
<y0>268</y0>
<width>101</width>
<height>58</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>87</outconnectx0>
<outconnecty0>1</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>ウィンドウを
生成する</description>
<codetext>window = new Window0();
window.setVisible(true);
editwindow=window;
container=window.getContentPane();
</codetext>
</operation>
<operation>
<ID>_OX5</ID>
<state1>_SX3</state1>
<state2>_SX3</state2>
<x0>228</x0>
<y0>267</y0>
<width>160</width>
<height>96</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>18</inconnecty0>
<outconnectx0>1</outconnectx0>
<outconnecty0>19</outconnecty0>
<inpintext>in(Container c)</inpintext>
<inpinx0>62</inpinx0>
<inpiny0>51</inpiny0>
<inpinwidth>99</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out(JFrame f)</outpintext>
<outpinx0>79</outpinx0>
<outpiny0>72</outpiny0>
<outpinwidth>82</outpinwidth>
<outpinheight>24</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウの
コンテントペインを設定</description>
<codetext>window.setContentPane(c);
window.pack();
f=window;
</codetext>
</operation>
<pin>
<ID>_P26</ID>
<x0>433</x0>
<y0>360</y0>
<width>91</width>
<height>26</height>
<text>join(JFrame f)</text>
<px>85</px>
<py>23</py>
</pin>
<pin>
<ID>_PX16</ID>
<x0>406</x0>
<y0>21</y0>
<width>57</width>
<height>23</height>
<text>Opened()</text>
<px>379</px>
<py>103</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>347</x0>
<y0>21</y0>
<width>59</width>
<height>23</height>
<text>Iconfied()</text>
<px>363</px>
<py>58</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>276</x0>
<y0>21</y0>
<width>71</width>
<height>23</height>
<text>Deiconfied()</text>
<px>365</px>
<py>98</py>
</pin>
<pin>
<ID>_PX13</ID>
<x0>457</x0>
<y0>0</y0>
<width>80</width>
<height>21</height>
<text>Deactivated()</text>
<px>364</px>
<py>47</py>
</pin>
<pin>
<ID>_PX12</ID>
<x0>397</x0>
<y0>0</y0>
<width>60</width>
<height>21</height>
<text>Closing()</text>
<px>136</px>
<py>46</py>
</pin>
<pin>
<ID>_PX11</ID>
<x0>341</x0>
<y0>0</y0>
<width>56</width>
<height>21</height>
<text>Closed()</text>
<px>359</px>
<py>20</py>
</pin>
<pin>
<ID>_PX10</ID>
<x0>276</x0>
<y0>0</y0>
<width>65</width>
<height>21</height>
<text>Activated()</text>
<px>80</px>
<py>102</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>418</x0>
<y0>297</y0>
<width>96</width>
<height>29</height>
<text>set(Container c)</text>
<px>30</px>
<py>46</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>6</x0>
<y0>194</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX3</ID>
<x0>135</x0>
<y0>195</y0>
<width>70</width>
<height>40</height>
<text>   待機状態</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<aobject>
<ID>_A56</ID>
<x0>396</x0>
<y0>322</y0>
<width>163</width>
<height>70</height>
<ID_maker>47</ID_maker>
<objectname>Creater</objectname>
<description>ObjectEditor用のファイルをつくる</description>
<action>
<ID>_A2</ID>
<comp1name>_P1</comp1name>
<comp2name>_O0</comp2name>
</action>
<action>
<ID>_A13</ID>
<comp1name>_P5</comp1name>
<comp2name>_O12</comp2name>
</action>
<codeclip>
<ID>_C3</ID>
<x0>241</x0>
<y0>0</y0>
<width>138</width>
<height>20</height>
<codetext>JFrame ウィンドウ;

</codetext>
</codeclip>
<codeclip>
<ID>_C17</ID>
<x0>241</x0>
<y0>19</y0>
<width>458</width>
<height>22</height>
<codetext>public String getRegulerFileName( String fname ){//ファイル名の正規表現を得る
  String ret;
  if( ( fname==null ) || ( fname.equals(&quot;&quot;) ) ) return(&quot;null&quot;);
  XFile f = new XFile(fname);
  if( !f.isFile() ) return(&quot;null&quot;);
  try{
    ret = f.toURL().getFile();
  } catch( MalformedURLException e ){ ret = &quot;null&quot;; }
  return( ret );
}
  
</codetext>
</codeclip>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>86</x0>
<y0>12</y0>
<width>144</width>
<height>67</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>48</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>48</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>66</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>78</inpinwidth>
<inpinheight>25</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウを取得する
</description>
<codetext>ウィンドウ = f;
</codetext>
</operation>
<operation>
<ID>_O12</ID>
<state1>_SINIT</state1>
<state2>_S11</state2>
<x0>88</x0>
<y0>145</y0>
<width>144</width>
<height>66</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>127</outconnectx0>
<outconnecty0>25</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>76</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>68</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件 s.equals(&quot;CRE&quot;)
状態１に遷移する</description>
<codetext></codetext>
</operation>
<pin>
<ID>_P1</ID>
<x0>150</x0>
<y0>99</y0>
<width>83</width>
<height>25</height>
<text>get(JFrame f)</text>
<px>83</px>
<py>31</py>
</pin>
<pin>
<ID>_P5</ID>
<x0>155</x0>
<y0>238</y0>
<width>85</width>
<height>26</height>
<text>cmd(String s)</text>
<px>80</px>
<py>50</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>0</x0>
<y0>163</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_S11</ID>
<x0>351</x0>
<y0>184</y0>
<width>70</width>
<height>40</height>
<text>     状態１</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_S18</ID>
<x0>351</x0>
<y0>386</y0>
<width>70</width>
<height>40</height>
<text>      状態2</text>
<isinitstate>0</isinitstate>
</state>
<operation>
<ID>_O24</ID>
<state1>_S26</state1>
<state2>_SINIT</state2>
<x0>26</x0>
<y0>287</y0>
<width>143</width>
<height>69</height>
<inconnectx0>111</inconnectx0>
<inconnecty0>51</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>メニューをセーブする
</description>
<codetext>JMenuBar メニューバー = ウィンドウ.getJMenuBar();
if( メニューバー != null ){
  int i;
  for( i = 0; i &lt; メニューバー.getComponentCount(); i++ ){
    f1.Xappend( メニューを文字列に変換(  (JMenu)メニューバー.getComponent( i ) ) + &quot;END;\n&quot; );
  }
}
</codetext>
</operation>
<codeclip>
<ID>_C25</ID>
<x0>241</x0>
<y0>59</y0>
<width>310</width>
<height>22</height>
<codetext>private String メニューを文字列に変換( JMenu m ){
  String s = &quot;Menu;&quot; + m.getText() + &quot;;&quot; + m.getMnemonic() + &quot;;&quot;;
  int i;
  for( i = 0; i &lt; m.getItemCount(); i++){
    s = s + メニューを文字列に変換( (JMenu)m.getItem( i ) );
  }
  return( s + &quot;/Menu;&quot; );
}

</codetext>
</codeclip>
<state>
<ID>_S26</ID>
<x0>134</x0>
<y0>387</y0>
<width>70</width>
<height>40</height>
<text>      状態3</text>
<isinitstate>0</isinitstate>
</state>
<codeclip>
<ID>_C32</ID>
<x0>551</x0>
<y0>59</y0>
<width>69</width>
<height>22</height>
<codetext>XFile f1;
</codetext>
</codeclip>
<codeclip>
<ID>_C35</ID>
<x0>241</x0>
<y0>39</y0>
<width>252</width>
<height>21</height>
<codetext>private String メニューの名前( JMenu m ){
  int i;
  String s = m.getText();
  for( i = 0; i &lt; s.length(); i++ ){
     char c = s.charAt( i );
     if( c ==&apos;+&apos; || c ==&apos;-&apos; || c ==&apos;*&apos; || c == &apos;/&apos; || c == &apos;\\&apos; || c == &apos;&amp;&apos; || c == &apos;|&apos; || c == &apos;~&apos; || c==&apos;=&apos;
      || c ==&apos;(&apos; || c == &apos;)&apos; || c == &apos;[&apos; || c == &apos;]&apos; || c == &apos;{&apos;  || c == &apos;}&apos;
      || c == &apos;:&apos; || c == &apos;,&apos; || c == &apos;:&apos; || c == &apos;;&apos; || c == &apos;\&apos;&apos; || c == &apos;\&quot;&apos; || c == &apos;%&apos; || c == &apos;!&apos; ) break;
  }  
  if( i == 0 ) return( &quot;&quot; ); else return( s.substring( 0, i ) );
}
</codetext>
</codeclip>
<codeclip>
<ID>_C36</ID>
<x0>241</x0>
<y0>99</y0>
<width>432</width>
<height>22</height>
<codetext>private String メニュークラス生成C( String 親クラス名, JMenu メニュー ){
  String テキスト = メニュー.getText();
  int キー = メニュー.getMnemonic();
  String クラス名 = メニューの名前( メニュー );
   int i;
   String s = &quot;&quot;;
   int n = メニュー.getItemCount();
   if( n == 0 ){
      s =
      &quot; class &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot; : public EMenuItem{\npublic:\n&quot; +
      &quot;   &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;(){\n&quot; +
      &quot;    setText( \&quot;&quot; + メニュー文字列(テキスト, キー) + &quot;\&quot; );\n&quot; +
      &quot;  }\n&quot; +
      &quot;  void actionPerformed(){\n&quot; +
      &quot;    &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;_selected();\n&quot; +
      &quot;  }\n};\n&quot;;
      return( s );
   }


   else {
      s =&quot;&quot;; 
      for( i = 0; i &lt; メニュー.getItemCount(); i++ ){
        s = s + メニュークラス生成C(  親クラス名 + &quot;_&quot; + クラス名,  (JMenu)メニュー.getItem( i )  );
      }

      s = s +
      &quot; class &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot; : public EMenu{\npublic:\n&quot; +
      &quot;   &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;(){\n&quot; +
      &quot;    setText( \&quot;&quot; + メニュー文字列(テキスト, キー) + &quot;\&quot; );\n&quot;;
 
     for( i = 0; i &lt; メニュー.getItemCount(); i++ ){
        s = s + &quot;    add( new &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;_&quot; + メニューの名前(  (JMenu)メニュー.getItem( i )  ) + &quot;() );\n&quot;;
      }
      s = s + &quot; }\n};\n&quot;;
      return( s );
    }
}

</codetext>
</codeclip>
<codeclip>
<ID>_C37</ID>
<x0>241</x0>
<y0>80</y0>
<width>448</width>
<height>20</height>
<codetext>private void メニュー名を追加( String 親クラス名, JMenu メニュー, Vector v ){
  int i;
  int n = メニュー.getItemCount();
  if( n == 0 )  v.add( 親クラス名  + &quot;_&quot; + メニューの名前( メニュー ) );
  else{
    for( i = 0; i &lt; n; i++ ){
      メニュー名を追加( 親クラス名 + &quot;_&quot; + メニューの名前( メニュー ), (JMenu)メニュー.getItem( i ), v );
    }
  }

}
</codetext>
</codeclip>
<operation>
<ID>_O40</ID>
<state1>_S11</state1>
<state2>_S18</state2>
<x0>478</x0>
<y0>150</y0>
<width>195</width>
<height>53</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>20</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>18</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>74</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>条件: AppTyp.equals(&quot;-cpp&quot;)
CPP用ファイルを生成する
</description>
<codetext>String xml;
int i = 0;;
int j = 0;
Container cnt =ウィンドウ.getContentPane();

StringBuffer guideclare = new StringBuffer(&quot;&quot;);
StringBuffer guiconstruct   = new StringBuffer(&quot; XGUI(){\n setTitle(\&quot;&quot; + editwindow.getTitle() + &quot;\&quot;);\n&quot;);
guiconstruct.append(&quot; setBounds(0, 0, &quot; + ウィンドウ.getWidth() + &quot;, &quot; + ウィンドウ.getHeight() + &quot;);\n&quot; );

xml=           &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&lt;!-- なんちゃってXML version 0.1( ObjectEditor専用 ) --&gt;\n&quot;;
xml=xml+&quot;&lt;aobject&gt;\n&lt;ID&gt;GUI&lt;/ID&gt;&lt;x0&gt;100&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;280&lt;/width&gt;&lt;objectname&gt;GUI&lt;/objectname&gt;&lt;description&gt;GUIオブジェクト\n&lt;/description&gt;\n&quot;;
xml=xml+&quot;&lt;state&gt;&lt;ID&gt;_SINIT&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;70&lt;/width&gt;&lt;height&gt;40&lt;/height&gt;&lt;text&gt;  InitState&lt;/text&gt;&lt;isinitstate&gt;1&lt;/isinitstate&gt;&lt;/state&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_Pstart&lt;/ID&gt;&lt;x0&gt;400&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;80&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;Start()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;36&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIout&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;84&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_created(EWindow* e)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;54&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIclosed&lt;/ID&gt;&lt;x0&gt;310&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_closed()&lt;/text&gt;&lt;px&gt;100&lt;/px&gt;&lt;py&gt;6&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIpaint&lt;/ID&gt;&lt;x0&gt;490&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_paint(HWND hwnd)&lt;/text&gt;&lt;px&gt;100&lt;/px&gt;&lt;py&gt;26&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;action&gt;&lt;ID&gt;_Astart&lt;/ID&gt;&lt;comp1name&gt;_Pstart&lt;/comp1name&gt;&lt;comp2name&gt;_Ocreate&lt;/comp2name&gt;&lt;/action&gt;\n&quot;;
xml=xml+&quot;&lt;operation&gt;&lt;ID&gt;_Ocreate&lt;/ID&gt;&lt;state1&gt;_SINIT&lt;/state1&gt;&lt;state2&gt;_SINIT&lt;/state2&gt;&lt;x0&gt;220&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;130&lt;/width&gt;&lt;height&gt;64&lt;/height&gt;&quot;;
xml=xml+&quot;&lt;inconnectx0&gt;0&lt;/inconnectx0&gt;&lt;inconnecty0&gt;30&lt;/inconnecty0&gt;&lt;outconnectx0&gt;0&lt;/outconnectx0&gt;&lt;outconnecty0&gt;30&lt;/outconnecty0&gt;&quot;;
xml=xml+&quot;&lt;inpintext&gt;in()&lt;/inpintext&gt;&lt;inpinx0&gt;90&lt;/inpinx0&gt;&lt;inpiny0&gt;43&lt;/inpiny0&gt;&lt;inpinwidth&gt;40&lt;/inpinwidth&gt;&lt;inpinheight&gt;20&lt;/inpinheight&gt;&quot;;
xml=xml+&quot;&lt;outpintext&gt;out()&lt;/outpintext&gt;&lt;outpinx0&gt;90&lt;/outpinx0&gt;&lt;outpiny0&gt;40&lt;/outpiny0&gt;&lt;outpinwidth&gt;40&lt;/outpinwidth&gt;&lt;outpinheight&gt;20&lt;/outpinheight&gt;&quot;;
xml=xml+&quot;&lt;inpinlinkcount&gt;1&lt;/inpinlinkcount&gt;&lt;description&gt;GUIを作成する\n&lt;/description&gt;&lt;codetext&gt;new XGUI();\n\n&lt;/codetext&gt;&lt;/operation&gt;\n&quot;;

JMenuBar menubar = ウィンドウ.getJMenuBar();
if( menubar != null &amp;&amp; menubar.getComponentCount() != 0 ){
    Vector menu_names = new Vector();
    guideclare.append(   &quot;EMenuBar* menubar;\n&quot; );
    guiconstruct.append(  &quot;menubar = new EMenuBar();\nsetEMenuBar( menubar );\n&quot; );

    for( i=0; i&lt; menubar.getComponentCount(); i++ ){
       メニュー名を追加( &quot;&quot;, (JMenu)menubar.getComponent( i ), menu_names );
       guideclare.append(   メニュークラス生成C( &quot;&quot;, (JMenu)menubar.getComponent( i ) ) );
       guiconstruct.append(  &quot;menubar-&gt;add( new  _&quot; + メニューの名前( (JMenu)menubar.getComponent( i )  ) + &quot;() );\n&quot; );
    }

    for( i = 0; i &lt; menu_names.size(); i++ ){
      String name = menu_names.get( i ).toString();
      xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_selected()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    }

}

for( i=cnt.getComponentCount()-1;i&gt;=0;i--){
  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();
    int ax = lbl.getHorizontalAlignment();
    int ay = lbl.getVerticalAlignment();
    String txt = lbl.getText();

    String imagefile = getRegulerFileName( ( (XJLabel)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public ELabel{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( lbl.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    if( lbl.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(ELabel* l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();
    int ax = btn.getHorizontalAlignment();
    int ay = btn.getVerticalAlignment();
    String txt = btn.getText();

    String imagefile = getRegulerFileName( ( (XJButton)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public EButton{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot; + name + &quot;(){\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( btn.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; void actionPerformed(){&quot; );
    if( btn.print_clicked_pin ) guideclare.append( &quot; &quot;+ name +&quot;_clicked();\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( btn.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(EButton* b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( btn.print_clicked_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_clicked()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();
    String txt = fld.getText();
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public ETextField{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( fld.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( fld.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(ETextField* t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.HORIZONTAL ) ){
    XJHSlider sld= (XJHSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public EHScrollBar{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; void stateChanged( int i ){\n&quot; );
    if( sld.print_changed_pin ) guideclare.append( &quot; &quot; + name +&quot;_changed( i );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(EHScrollBar* s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.VERTICAL ) ){
    XJVSlider sld= (XJVSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public EVScrollBar{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; void stateChanged( int i ){\n&quot; );
    if( sld.print_changed_pin ) guideclare.append( &quot; &quot; + name +&quot;_changed( i );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(EVScrollBar* s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    boolean sl = chk.isSelected();
    guideclare.append( &quot; class &quot;+ name +&quot; : public ECheckBox{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setSelected( &quot; + sl +&quot; );\n&quot;);
    if( chk.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; void actionPerformed(){\n&quot; );
    if( chk.print_check_pin ) guideclare.append( &quot; &quot; + name + &quot;_check( isSelected() );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( chk.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(ECheckBox* c)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( chk.print_check_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_check(int b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara =  (XJTextArea)( cnt.getComponent(i) );
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();
    String txt = ara.getText();
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public ETextArea{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( ara.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( ara.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(ETextArea* t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JList ){
    XJList lst =  (XJList)( cnt.getComponent(i) );
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    Color  fcol = lst.getForeground();
    Color  bcol = lst.getBackground();
    Font f = lst.getFont();
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    guideclare.append( &quot; class &quot;+ name +&quot; : public EList{\npublic:\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( lst.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_create( this );\n}\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; void valueChanged( char* s ){\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; &quot; + name +&quot;_selected( s );\n&quot; );
    guideclare.append( &quot; }\n&quot; );
    guideclare.append( &quot; };\n&quot; );
    guideclare.append(   name + &quot;* I&quot;+name+&quot;;\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; add( I&quot; + name + &quot;);\n&quot; );
    guiconstruct.append( &quot;I&quot; + name  + &quot;-&gt;setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( lst.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_create(EList* l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lst.print_selected_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_selected(char* s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
}
guiconstruct.append( &quot; setVisible( 1 );\n GUI_created( this );\n}\n&quot; );
guideclare.append( &quot;class XGUI : public EWindow{\npublic:\n&quot; );
guideclare.append( guiconstruct.toString()  );
guideclare.append( &quot; void EWindowClosing(){ GUI_closed(); }\n&quot; );
guideclare.append( &quot; void paintEWindow(HWND hwnd){ GUI_paint(hwnd); }\n&quot; );
guideclare.append( &quot;};\n&quot; );

String s1 = guideclare.toString();
String s2 = &quot;&quot;;
for( int p = 0; p &lt; s1.length(); p++ ){
  char c = s1.charAt(p);
  if( c == &apos;&lt;&apos; ) s2 = s2 + &quot;&amp;lt;&quot;;
  else if( c == &apos;&gt;&apos; ) s2 = s2 + &quot;&amp;gt;&quot;;
  else if( c == &apos;&amp;&apos; ) s2 = s2 + &quot;&amp;amp;&quot;;
  else if( c == &apos;\&apos;&apos; ) s2 =s2 + &quot;&amp;apos;&quot;;
  else if( c == &apos;\&quot;&apos; ) s2 = s2 + &quot;&amp;quot;&quot;;
  else s2 = s2 + c;
}

xml = xml + &quot;&lt;codeclip&gt;&lt;ID&gt;_CXSTART&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;300&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;codetext&gt;&quot; + s2 + &quot;&lt;/codetext&gt;&lt;/codeclip&gt;\n&quot;
          + &quot;&lt;ID_maker&gt;&quot; + (j+20) + &quot;&lt;/ID_maker&gt;&lt;height&gt;&quot; + (18*j+76) + &quot;&lt;/height&gt;&lt;/aobject&gt;\n&quot;;

f1 = new XFile(&quot;GUI.xml&quot;);
f1.Xdelete();
f1.Xappend( xml );


</codetext>
</operation>
<operation>
<ID>_O41</ID>
<state1>_S11</state1>
<state2>_S18</state2>
<x0>481</x0>
<y0>262</y0>
<width>197</width>
<height>51</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>16</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>18</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>74</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>条件: AppTyp.equals(&quot;-java&quot;)
Java用ファイルを生成する
</description>
<codetext>String xml;
int i = 0;;
int j = 0;
Container cnt =ウィンドウ.getContentPane();

StringBuffer guideclare = new StringBuffer(&quot; class XGUI extends JFrame implements WindowListener{\n JPanel cnt;\n&quot;);
StringBuffer guiconstruct   = new StringBuffer(&quot; XGUI(){\n setTitle(\&quot;&quot; + editwindow.getTitle() + &quot;\&quot;);\n cnt = new JPanel( new BorderLayout() );\n&quot;);
guiconstruct.append(&quot; cnt.setPreferredSize(  new  Dimension( &quot; + cnt.getWidth() + &quot;, &quot; + cnt.getHeight() + &quot; ) );\n&quot; );
Color col = ((Component)cnt).getBackground();
guiconstruct.append(&quot; ((Component)cnt).setBackground( new Color( &quot; + col.getRed() + &quot;, &quot; + col.getGreen() + &quot;, &quot; + col.getBlue() +  &quot; ) );\n&quot;  );

xml=           &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&lt;!-- なんちゃってXML version 0.1( ObjectEditor専用 ) --&gt;\n&quot;;
xml=xml+&quot;&lt;aobject&gt;\n&lt;ID&gt;GUI&lt;/ID&gt;&lt;x0&gt;100&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;280&lt;/width&gt;&lt;objectname&gt;GUI&lt;/objectname&gt;&lt;description&gt;GUIオブジェクト\n&lt;/description&gt;\n&quot;;
xml=xml+&quot;&lt;state&gt;&lt;ID&gt;_SINIT&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;70&lt;/width&gt;&lt;height&gt;40&lt;/height&gt;&lt;text&gt;  InitState&lt;/text&gt;&lt;isinitstate&gt;1&lt;/isinitstate&gt;&lt;/state&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_Pstart&lt;/ID&gt;&lt;x0&gt;400&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;80&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;Start()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;36&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIout&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;84&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_created(JFrame f)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;54&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIclosed&lt;/ID&gt;&lt;x0&gt;310&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_closed()&lt;/text&gt;&lt;px&gt;100&lt;/px&gt;&lt;py&gt;6&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;action&gt;&lt;ID&gt;_Astart&lt;/ID&gt;&lt;comp1name&gt;_Pstart&lt;/comp1name&gt;&lt;comp2name&gt;_Ocreate&lt;/comp2name&gt;&lt;/action&gt;\n&quot;;
xml=xml+&quot;&lt;operation&gt;&lt;ID&gt;_Ocreate&lt;/ID&gt;&lt;state1&gt;_SINIT&lt;/state1&gt;&lt;state2&gt;_SINIT&lt;/state2&gt;&lt;x0&gt;220&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;130&lt;/width&gt;&lt;height&gt;64&lt;/height&gt;&quot;;
xml=xml+&quot;&lt;inconnectx0&gt;0&lt;/inconnectx0&gt;&lt;inconnecty0&gt;30&lt;/inconnecty0&gt;&lt;outconnectx0&gt;0&lt;/outconnectx0&gt;&lt;outconnecty0&gt;30&lt;/outconnecty0&gt;&quot;;
xml=xml+&quot;&lt;inpintext&gt;in()&lt;/inpintext&gt;&lt;inpinx0&gt;90&lt;/inpinx0&gt;&lt;inpiny0&gt;43&lt;/inpiny0&gt;&lt;inpinwidth&gt;40&lt;/inpinwidth&gt;&lt;inpinheight&gt;20&lt;/inpinheight&gt;&quot;;
xml=xml+&quot;&lt;outpintext&gt;out()&lt;/outpintext&gt;&lt;outpinx0&gt;90&lt;/outpinx0&gt;&lt;outpiny0&gt;40&lt;/outpiny0&gt;&lt;outpinwidth&gt;40&lt;/outpinwidth&gt;&lt;outpinheight&gt;20&lt;/outpinheight&gt;&quot;;
xml=xml+&quot;&lt;inpinlinkcount&gt;1&lt;/inpinlinkcount&gt;&lt;description&gt;GUIを作成する\n&lt;/description&gt;&lt;codetext&gt;XGUI x = new XGUI();\n\n&lt;/codetext&gt;&lt;/operation&gt;\n&quot;;

JMenuBar menubar = ウィンドウ.getJMenuBar();
if( menubar != null &amp;&amp; menubar.getComponentCount() != 0 ){
    Vector menu_names = new Vector();
    guideclare.append(   &quot;JMenuBar menubar;\n&quot; );
    guiconstruct.append(  &quot;menubar = new JMenuBar();\nsetJMenuBar( menubar );\n&quot; );

    for( i=0; i&lt; menubar.getComponentCount(); i++ ){
       メニュー名を追加( &quot;&quot;, (JMenu)menubar.getComponent( i ), menu_names );
       guideclare.append(   メニュークラス生成J( &quot;&quot;, (JMenu)menubar.getComponent( i ) ) );
       guiconstruct.append(  &quot;menubar.add( new  _&quot; + メニューの名前( (JMenu)menubar.getComponent( i )  ) + &quot;() );\n&quot; );
    }

    for( i = 0; i &lt; menu_names.size(); i++ ){
      String name = menu_names.get( i ).toString();
      xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_selected()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    }

}


for( i=cnt.getComponentCount()-1;i&gt;=0;i--){

  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();
    int ax = lbl.getHorizontalAlignment();
    int ay = lbl.getVerticalAlignment();
    String txt = lbl.getText();

    String imagefile = getRegulerFileName( ( (XJLabel)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends &quot;+ lbl.super_class +&quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( lbl.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setHorizontalAlignment( &quot; + ax + &quot; );\n&quot; );
    guideclare.append( &quot; setVerticalAlignment( &quot; + ay + &quot; );\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( !imagefile.equals(&quot;null&quot;) ) guideclare.append( &quot; setIcon( new ImageIcon( \&quot;&quot; + imagefile + &quot;\&quot; ));\n&quot; );
    if( lbl.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( lbl.print_paint_pin) guideclare.append( &quot; public void paintComponent( Graphics g ){ super.paintComponent(g); &quot; + name +&quot;_paint(g); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    if( lbl.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JLabel l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lbl.print_paint_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PP&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_paint(Graphics g)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();
    int ax = btn.getHorizontalAlignment();
    int ay = btn.getVerticalAlignment();
    String txt = btn.getText();

    String imagefile = getRegulerFileName( ( (XJButton)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + btn.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + btn.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot; + name + &quot;(){\n&quot; );
    if( btn.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setHorizontalAlignment( &quot; + ax + &quot; );\n&quot; );
    guideclare.append( &quot; setVerticalAlignment( &quot; + ay + &quot; );\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( !imagefile.equals(&quot;null&quot;) ) guideclare.append( &quot; setIcon( new ImageIcon( \&quot;&quot; + imagefile + &quot;\&quot; ));\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( btn.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_clicked(); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( btn.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JButton b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( btn.print_clicked_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_clicked()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();
    String txt = fld.getText();
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + fld.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + fld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( fld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( fld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_input( getText() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( fld.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JTextField t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( fld.print_input_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_input(String s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.HORIZONTAL ) ){
    XJHSlider sld= (XJHSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot;+ sld.super_class + &quot; implements ChangeListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( sld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setOrientation( SwingConstants.HORIZONTAL );\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; addChangeListener( this );\n&quot; );
    if( sld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; public void stateChanged( ChangeEvent e ){ &quot; + name +&quot;_changed( getValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JSlider s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.VERTICAL ) ){
    XJVSlider sld= (XJVSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot; implements ChangeListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( sld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setOrientation( SwingConstants.VERTICAL );\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; addChangeListener( this );\n&quot; );
    if( sld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; public void stateChanged( ChangeEvent e ){ &quot; + name +&quot;_changed( getValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JSlider s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    boolean sl = chk.isSelected();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( chk.print_check_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + chk.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + chk.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( chk.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setSelected( &quot; + sl +&quot; );\n&quot;);
    if( chk.print_check_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( chk.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( chk.print_check_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_check( isSelected() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( chk.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JCheckBox c)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( chk.print_check_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_check(boolean b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara= (XJTextArea)( cnt.getComponent(i) );    
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();
    String txt = ara.getText();
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + ara.super_class + &quot;{\n&quot; );
    if( ara.is_scrollable ) guideclare.append( &quot; JScrollPane scrl;\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( ara.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( ara.is_scrollable ) guideclare.append( &quot; scrl = new JScrollPane( this );\n&quot; );
    if( ara.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    if( ara.is_scrollable ){
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;.scrl, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;.scrl );\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;.scrl ).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }
    else{
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;);\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }

    if( ara.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JTextArea t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JList ){
    XJList lst= (XJList)( cnt.getComponent(i) );    
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    Color  fcol = lst.getForeground();
    Color  bcol = lst.getBackground();
    Font f = lst.getFont();
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + lst.super_class + &quot; implements ListSelectionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + lst.super_class + &quot;{\n&quot; );
    if( lst.is_scrollable ) guideclare.append( &quot; JScrollPane scrl;\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( lst.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( lst.is_scrollable ) guideclare.append( &quot; scrl = new JScrollPane( this );\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; addListSelectionListener( this );\n&quot; );
    if( lst.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; public void valueChanged( ListSelectionEvent e ){ &quot; + name +&quot;_selected( getSelectedValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    if( lst.is_scrollable ){
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;.scrl, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;.scrl );\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;.scrl ).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }
    else{
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;);\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }

    if( lst.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JList l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lst.print_selected_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_selected(Object o)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
}



guiconstruct.append( &quot; setContentPane( cnt );\n pack();\n addWindowListener( this );\n setVisible( true );\n GUI_created( this );\n}\n&quot; );
guideclare.append( guiconstruct.toString() );
guideclare.append( &quot; public void windowActivated( WindowEvent e ){}\n&quot; );
guideclare.append( &quot; public void windowClosed( WindowEvent e ){}\n&quot; );
guideclare.append( &quot; public void windowClosing( WindowEvent e ){ GUI_closed(); }\n&quot; );
guideclare.append( &quot; public void windowDeactivated( WindowEvent e ){}\n&quot; );
guideclare.append( &quot; public void windowDeiconified( WindowEvent e ){}\n&quot; );
guideclare.append( &quot; public void windowIconified( WindowEvent e ){}\n&quot; );
guideclare.append( &quot; public void windowOpened( WindowEvent e ){}\n&quot; );
guideclare.append( &quot;}\n&quot; );

String s1 = guideclare.toString();
String s2 = &quot;&quot;;
for( int p = 0; p &lt; s1.length(); p++ ){
  char c = s1.charAt(p);
  if( c == &apos;&lt;&apos; ) s2 = s2 + &quot;&amp;lt;&quot;;
  else if( c == &apos;&gt;&apos; ) s2 = s2 + &quot;&amp;gt;&quot;;
  else if( c == &apos;&amp;&apos; ) s2 = s2 + &quot;&amp;amp;&quot;;
  else if( c == &apos;\&apos;&apos; ) s2 =s2 + &quot;&amp;apos;&quot;;
  else if( c == &apos;\&quot;&apos; ) s2 = s2 + &quot;&amp;quot;&quot;;
  else s2 = s2 + c;
}

xml = xml + &quot;&lt;codeclip&gt;&lt;ID&gt;_CXSTART&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;300&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;codetext&gt;&quot; + s2 + &quot;&lt;/codetext&gt;&lt;/codeclip&gt;\n&quot;
          + &quot;&lt;ID_maker&gt;&quot; + (j+20) + &quot;&lt;/ID_maker&gt;&lt;height&gt;&quot; + (18*j+76) + &quot;&lt;/height&gt;&lt;/aobject&gt;\n&quot;;

f1 = new XFile(&quot;GUI.xml&quot;);
f1.Xdelete();
f1.Xappend( xml );
</codetext>
</operation>
<operation>
<ID>_O42</ID>
<state1>_S11</state1>
<state2>_S18</state2>
<x0>486</x0>
<y0>373</y0>
<width>202</width>
<height>55</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>14</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>74</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>条件: AppTyp.equals(&quot;-applet&quot;)
アプレット用ファイルを生成する
</description>
<codetext>String xml;
int i = 0;;
int j = 0;
Container cnt =ウィンドウ.getContentPane();

StringBuffer guideclare = new StringBuffer(&quot; class XGUI{\n JPanel cnt;\n&quot;);
StringBuffer guiconstruct   = new StringBuffer(&quot; XGUI(){\n cnt = new JPanel( new BorderLayout() );\n&quot;);
guiconstruct.append(&quot; cnt.setPreferredSize(  new  Dimension( &quot; + cnt.getWidth() + &quot;, &quot; + cnt.getHeight() + &quot; ) );\n&quot; );
Color col = ((Component)cnt).getBackground();
guiconstruct.append(&quot; ((Component)cnt).setBackground( new Color( &quot; + col.getRed() + &quot;, &quot; + col.getGreen() + &quot;, &quot; + col.getBlue() +  &quot; ) );\n&quot;  );

xml=           &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&lt;!-- なんちゃってXML version 0.1( ObjectEditor専用 ) --&gt;\n&quot;;
xml=xml+&quot;&lt;aobject&gt;\n&lt;ID&gt;GUI&lt;/ID&gt;&lt;x0&gt;100&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;280&lt;/width&gt;&lt;objectname&gt;GUI&lt;/objectname&gt;&lt;description&gt;GUIオブジェクト\n&lt;/description&gt;\n&quot;;
xml=xml+&quot;&lt;state&gt;&lt;ID&gt;_SINIT&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;70&lt;/width&gt;&lt;height&gt;40&lt;/height&gt;&lt;text&gt;  InitState&lt;/text&gt;&lt;isinitstate&gt;1&lt;/isinitstate&gt;&lt;/state&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_Pstart&lt;/ID&gt;&lt;x0&gt;400&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;80&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;Start()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;36&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIout&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;84&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_created(Applet a)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;54&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;action&gt;&lt;ID&gt;_Astart&lt;/ID&gt;&lt;comp1name&gt;_Pstart&lt;/comp1name&gt;&lt;comp2name&gt;_Ocreate&lt;/comp2name&gt;&lt;/action&gt;\n&quot;;
xml=xml+&quot;&lt;operation&gt;&lt;ID&gt;_Ocreate&lt;/ID&gt;&lt;state1&gt;_SINIT&lt;/state1&gt;&lt;state2&gt;_SINIT&lt;/state2&gt;&lt;x0&gt;220&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;130&lt;/width&gt;&lt;height&gt;64&lt;/height&gt;&quot;;
xml=xml+&quot;&lt;inconnectx0&gt;0&lt;/inconnectx0&gt;&lt;inconnecty0&gt;30&lt;/inconnecty0&gt;&lt;outconnectx0&gt;0&lt;/outconnectx0&gt;&lt;outconnecty0&gt;30&lt;/outconnecty0&gt;&quot;;
xml=xml+&quot;&lt;inpintext&gt;in()&lt;/inpintext&gt;&lt;inpinx0&gt;90&lt;/inpinx0&gt;&lt;inpiny0&gt;43&lt;/inpiny0&gt;&lt;inpinwidth&gt;40&lt;/inpinwidth&gt;&lt;inpinheight&gt;20&lt;/inpinheight&gt;&quot;;
xml=xml+&quot;&lt;outpintext&gt;out()&lt;/outpintext&gt;&lt;outpinx0&gt;90&lt;/outpinx0&gt;&lt;outpiny0&gt;40&lt;/outpiny0&gt;&lt;outpinwidth&gt;40&lt;/outpinwidth&gt;&lt;outpinheight&gt;20&lt;/outpinheight&gt;&quot;;
xml=xml+&quot;&lt;inpinlinkcount&gt;1&lt;/inpinlinkcount&gt;&lt;description&gt;GUIを作成する\n\n&lt;/description&gt;&lt;codetext&gt;XGUI x = new XGUI();\n\n&lt;/codetext&gt;&lt;/operation&gt;\n&quot;;





for( i=cnt.getComponentCount()-1;i&gt;=0;i--){

  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();
    int ax = lbl.getHorizontalAlignment();
    int ay = lbl.getVerticalAlignment();
    String txt = lbl.getText();

    String imagefile = getRegulerFileName( ( (XJLabel)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends &quot;+ lbl.super_class +&quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( lbl.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setHorizontalAlignment( &quot; + ax + &quot; );\n&quot; );
    guideclare.append( &quot; setVerticalAlignment( &quot; + ay + &quot; );\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( !imagefile.equals(&quot;null&quot;) ) guideclare.append( &quot; setIcon( new ImageIcon( \&quot;&quot; + imagefile + &quot;\&quot; ));\n&quot; );
    if( lbl.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( lbl.print_paint_pin) guideclare.append( &quot; public void paintComponent( Graphics g ){ super.paintComponent(g); &quot; + name +&quot;_paint(g); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    if( lbl.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JLabel l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lbl.print_paint_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PP&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_paint(Graphics g)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();
    int ax = btn.getHorizontalAlignment();
    int ay = btn.getVerticalAlignment();
    String txt = btn.getText();

    String imagefile = getRegulerFileName( ( (XJButton)(cnt.getComponent(i)) ).ImageFile );
    
    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + btn.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + btn.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot; + name + &quot;(){\n&quot; );
    if( btn.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setHorizontalAlignment( &quot; + ax + &quot; );\n&quot; );
    guideclare.append( &quot; setVerticalAlignment( &quot; + ay + &quot; );\n&quot; );
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( !imagefile.equals(&quot;null&quot;) ) guideclare.append( &quot; setIcon( new ImageIcon( \&quot;&quot; + imagefile + &quot;\&quot; ));\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( btn.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_clicked(); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( btn.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JButton b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( btn.print_clicked_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_clicked()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();
    String txt = fld.getText();
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + fld.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + fld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( fld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( fld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( fld.print_input_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_input( getText() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( fld.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JTextField t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( fld.print_input_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_input(String s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.HORIZONTAL ) ){
    XJHSlider sld= (XJHSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot;+ sld.super_class + &quot; implements ChangeListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( sld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setOrientation( SwingConstants.HORIZONTAL );\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; addChangeListener( this );\n&quot; );
    if( sld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; public void stateChanged( ChangeEvent e ){ &quot; + name +&quot;_changed( getValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JSlider s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.VERTICAL ) ){
    XJVSlider sld= (XJVSlider)( cnt.getComponent(i) );    
    String name = sld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    Color  fcol = sld.getForeground();
    Color  bcol = sld.getBackground();
    int minval = sld.getMinimum();
    int maxval = sld.getMaximum();
    int x0 = sld.getX();
    int y0 = sld.getY();
    int wid = sld.getWidth();
    int hei  = sld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot; implements ChangeListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( sld.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setOrientation( SwingConstants.VERTICAL );\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setMinimum( &quot; + minval + &quot; );\n&quot; );
    guideclare.append( &quot; setMaximum( &quot; + maxval + &quot; );\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; addChangeListener( this );\n&quot; );
    if( sld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( sld.print_changed_pin) guideclare.append( &quot; public void stateChanged( ChangeEvent e ){ &quot; + name +&quot;_changed( getValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( sld.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JSlider s)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.print_changed_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    boolean sl = chk.isSelected();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( chk.print_check_pin) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + chk.super_class + &quot; implements ActionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + chk.super_class + &quot;{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( chk.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setSelected( &quot; + sl +&quot; );\n&quot;);
    if( chk.print_check_pin) guideclare.append( &quot; addActionListener( this );\n&quot; );
    if( chk.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( chk.print_check_pin) guideclare.append( &quot; public void actionPerformed( ActionEvent e ){ &quot; + name +&quot;_check( isSelected() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
    guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot; );\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );

    if( chk.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JCheckBox c)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( chk.print_check_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_check(boolean b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara= (XJTextArea)( cnt.getComponent(i) );    
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();
    String txt = ara.getText();
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + ara.super_class + &quot;{\n&quot; );
    if( ara.is_scrollable ) guideclare.append( &quot; JScrollPane scrl;\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( ara.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( ara.is_scrollable ) guideclare.append( &quot; scrl = new JScrollPane( this );\n&quot; );
    if( ara.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    if( ara.is_scrollable ){
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;.scrl, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;.scrl );\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;.scrl ).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }
    else{
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;);\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }

    if( ara.print_create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JTextArea t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
  if( cnt.getComponent(i) instanceof JList ){
    XJList lst= (XJList)( cnt.getComponent(i) );    
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    Color  fcol = lst.getForeground();
    Color  bcol = lst.getBackground();
    Font f = lst.getFont();
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + lst.super_class + &quot; implements ListSelectionListener{\n&quot; );
    else guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + lst.super_class + &quot;{\n&quot; );
    if( lst.is_scrollable ) guideclare.append( &quot; JScrollPane scrl;\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    if( lst.is_opaque ) guideclare.append( &quot; setOpaque( true );\n&quot; ); else guideclare.append( &quot; setOpaque( false );\n setBorder(null);\n&quot; );
    guideclare.append( &quot; setName(  \&quot;&quot; + name + &quot;\&quot; );\n&quot; );
    guideclare.append( &quot; setFont( new Font( \&quot;&quot; + f.getName() +&quot;\&quot;, &quot; + f.getStyle() + &quot;, &quot; + f.getSize() + &quot; ));\n&quot;);
    guideclare.append( &quot; setForeground( new Color(  &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackground( new Color(  &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( lst.is_scrollable ) guideclare.append( &quot; scrl = new JScrollPane( this );\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; addListSelectionListener( this );\n&quot; );
    if( lst.print_create_pin ) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( lst.print_selected_pin ) guideclare.append( &quot; public void valueChanged( ListSelectionEvent e ){ &quot; + name +&quot;_selected( getSelectedValue() ); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    if( lst.is_scrollable ){
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;.scrl, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;.scrl );\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;.scrl ).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }
    else{
      guiconstruct.append( &quot; cnt.add( I&quot; + name + &quot;, 0 );\n&quot; );
      guiconstruct.append( &quot; cnt.getLayout().removeLayoutComponent( I&quot; + name + &quot;);\n&quot; );
      guiconstruct.append( &quot; (  I&quot; + name  + &quot;).setBounds( &quot; + x0 + &quot;, &quot; + y0 + &quot;, &quot; + wid + &quot;, &quot; + hei + &quot; );\n&quot; );
    }

    if( lst.print_create_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(JList l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lst.print_selected_pin ) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_selected(Object o)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }
}







guiconstruct.append( &quot; APPLET.add( cnt );\n GUI_created( APPLET );\n}\n&quot; );
guideclare.append( guiconstruct.toString() );
guideclare.append( &quot;}\n&quot; );

String s1 = guideclare.toString();
String s2 = &quot;&quot;;
for( int p = 0; p &lt; s1.length(); p++ ){
  char c = s1.charAt(p);
  if( c == &apos;&lt;&apos; ) s2 = s2 + &quot;&amp;lt;&quot;;
  else if( c == &apos;&gt;&apos; ) s2 = s2 + &quot;&amp;gt;&quot;;
  else if( c == &apos;&amp;&apos; ) s2 = s2 + &quot;&amp;amp;&quot;;
  else if( c == &apos;\&apos;&apos; ) s2 =s2 + &quot;&amp;apos;&quot;;
  else if( c == &apos;\&quot;&apos; ) s2 = s2 + &quot;&amp;quot;&quot;;
  else s2 = s2 + c;
}

xml = xml + &quot;&lt;codeclip&gt;&lt;ID&gt;_CXSTART&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;300&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;codetext&gt;&quot; + s2 + &quot;&lt;/codetext&gt;&lt;/codeclip&gt;\n&quot;
          + &quot;&lt;ID_maker&gt;&quot; + (j+20) +&quot;&lt;/ID_maker&gt;&lt;height&gt;&quot; + (18*j+76) + &quot;&lt;/height&gt;&lt;/aobject&gt;\n&quot;;

f1 = new XFile(&quot;GUI.xml&quot;);
f1.Xdelete();
f1.Xappend( xml );
</codetext>
</operation>
<codeclip>
<ID>_C43</ID>
<x0>241</x0>
<y0>120</y0>
<width>432</width>
<height>22</height>
<codetext>private String メニュークラス生成J( String 親クラス名, JMenu メニュー ){
  String テキスト = メニュー.getText();
  int キー = メニュー.getMnemonic();
  String クラス名 = メニューの名前( メニュー );
   int i;
   String s = &quot;&quot;;
   int n = メニュー.getItemCount();
   if( n == 0 ){
      s =
      &quot; class &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot; extends JMenuItem implements ActionListener{\n&quot; +
      &quot;   &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;(){\n&quot; +
      &quot;    setText( \&quot;&quot; + テキスト + &quot;\&quot; );\n&quot; +
      &quot;    setMnemonic( &quot; + キー + &quot; );\n&quot; +
      &quot;    addActionListener( this );\n&quot; +
      &quot;  }\n&quot; +
      &quot;  public void actionPerformed( ActionEvent e ){\n&quot; +
      &quot;    &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;_selected();\n&quot; +
      &quot;  }\n&quot; +
      &quot;}\n&quot;;

      return( s );
   }


   else {
      s = 
      &quot; class &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot; extends JMenu{\n&quot; +
      &quot;   &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;(){\n&quot; +
      &quot;    setText( \&quot;&quot; + テキスト + &quot;\&quot; );\n&quot; +
      &quot;    setMnemonic( &quot; + キー + &quot; );\n&quot; ;
 
     for( i = 0; i &lt; メニュー.getItemCount(); i++ ){
        s = s + &quot;    add( new &quot; + 親クラス名 + &quot;_&quot; + クラス名 + &quot;_&quot; + メニューの名前(  (JMenu)メニュー.getItem( i )  ) + &quot;() );\n&quot;;
      }
      s = s + &quot; }\n&quot;;

     for( i = 0; i &lt; メニュー.getItemCount(); i++ ){
        s = s + メニュークラス生成J(  親クラス名 + &quot;_&quot; + クラス名,  (JMenu)メニュー.getItem( i )  );
      }
      s = s + &quot;}\n&quot;;
      return( s );
    }
}

</codetext>
</codeclip>
<codeclip>
<ID>_C44</ID>
<x0>379</x0>
<y0>0</y0>
<width>280</width>
<height>20</height>
<codetext>public String メニュー文字列( String txt, int key ){
  int p = txt.indexOf( (char)key );
  if( p &gt;= 0 ) return( txt.substring( 0, p ) + &quot;&amp;&quot; + txt.substring( p ) );
  return( txt );
}

</codetext>
</codeclip>
<operation>
<ID>_O45</ID>
<state1>_S11</state1>
<state2>_S18</state2>
<x0>488</x0>
<y0>463</y0>
<width>214</width>
<height>54</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>74</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>条件: AppTyp.equals(&quot;-android&quot;)
android用ファイルを生成する
</description>
<codetext>String xml;
int i = 0;;
int j = 0;
Container cnt =ウィンドウ.getContentPane();

StringBuffer guideclare = new StringBuffer(&quot; class XGUI{\n&quot;);
StringBuffer guiconstruct   = new StringBuffer(&quot; XGUI(){\n AbsoluteLayout layout=new AbsoluteLayout(ACTIVITY);\n&quot;);
Color col = ((Component)cnt).getBackground();
guiconstruct.append(&quot;layout.setBackgroundColor(Color.rgb( &quot; + col.getRed() + &quot;, &quot; + col.getGreen() + &quot;, &quot; + col.getBlue() +  &quot;));\n&quot;);
guiconstruct.append(&quot;ACTIVITY.setContentView(layout);\n&quot;);


xml=           &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&lt;!-- なんちゃってXML version 0.1( ObjectEditor専用 ) --&gt;\n&quot;;
xml=xml+&quot;&lt;aobject&gt;\n&lt;ID&gt;GUI&lt;/ID&gt;&lt;x0&gt;100&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;280&lt;/width&gt;&lt;objectname&gt;GUI&lt;/objectname&gt;&lt;description&gt;GUIオブジェクト\n&lt;/description&gt;\n&quot;;
xml=xml+&quot;&lt;state&gt;&lt;ID&gt;_SINIT&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;70&lt;/width&gt;&lt;height&gt;40&lt;/height&gt;&lt;text&gt;  InitState&lt;/text&gt;&lt;isinitstate&gt;1&lt;/isinitstate&gt;&lt;/state&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_Pstart&lt;/ID&gt;&lt;x0&gt;400&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;80&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;Start()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;36&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIout&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;84&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_create(View v)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;54&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;action&gt;&lt;ID&gt;_Astart&lt;/ID&gt;&lt;comp1name&gt;_Pstart&lt;/comp1name&gt;&lt;comp2name&gt;_Ocreate&lt;/comp2name&gt;&lt;/action&gt;\n&quot;;
xml=xml+&quot;&lt;operation&gt;&lt;ID&gt;_Ocreate&lt;/ID&gt;&lt;state1&gt;_SINIT&lt;/state1&gt;&lt;state2&gt;_SINIT&lt;/state2&gt;&lt;x0&gt;220&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;130&lt;/width&gt;&lt;height&gt;64&lt;/height&gt;&quot;;
xml=xml+&quot;&lt;inconnectx0&gt;0&lt;/inconnectx0&gt;&lt;inconnecty0&gt;30&lt;/inconnecty0&gt;&lt;outconnectx0&gt;0&lt;/outconnectx0&gt;&lt;outconnecty0&gt;30&lt;/outconnecty0&gt;&quot;;
xml=xml+&quot;&lt;inpintext&gt;in()&lt;/inpintext&gt;&lt;inpinx0&gt;90&lt;/inpinx0&gt;&lt;inpiny0&gt;43&lt;/inpiny0&gt;&lt;inpinwidth&gt;40&lt;/inpinwidth&gt;&lt;inpinheight&gt;20&lt;/inpinheight&gt;&quot;;
xml=xml+&quot;&lt;outpintext&gt;out()&lt;/outpintext&gt;&lt;outpinx0&gt;90&lt;/outpinx0&gt;&lt;outpiny0&gt;40&lt;/outpiny0&gt;&lt;outpinwidth&gt;40&lt;/outpinwidth&gt;&lt;outpinheight&gt;20&lt;/outpinheight&gt;&quot;;
xml=xml+&quot;&lt;inpinlinkcount&gt;1&lt;/inpinlinkcount&gt;&lt;codetext&gt;//GUIを作成する\nXGUI x = new XGUI();\n\n&lt;/codetext&gt;&lt;/operation&gt;\n&quot;;


for( i=cnt.getComponentCount()-1;i&gt;=0;i--){

  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();
    String txt = lbl.getText();

    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends TextView{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setTextSize( &quot;+ f.getSize() + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( lbl.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( lbl.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(TextView t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;

    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();
    String txt = btn.getText();

    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends Button{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setTextSize( &quot;+ f.getSize() + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( btn.print_clicked_pin) guideclare.append( &quot; setOnClickListener(new OnClickListener(){ public void onClick(View v) {&quot; + name + &quot;_clicked();}} );\n&quot;);
    if( btn.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( btn.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(Button b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( btn.print_clicked_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_clicked()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();
    String txt = fld.getText();
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends EditText{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setTextSize( &quot;+ f.getSize() + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( fld.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( fld.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(EditText e)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    boolean sl = chk.isSelected();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends CheckBox{\n&quot; );
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( chk.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( chk.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(CheckBox c)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara= (XJTextArea)( cnt.getComponent(i) );    
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();
    String txt = ara.getText();
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends EditText{\n&quot; );
    guideclare.append( &quot;  &quot;  + name + &quot;(){\n&quot; );
    guideclare.append( &quot; setTextSize( &quot;+ f.getSize() + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fcol.getRed() + &quot;, &quot; + fcol.getGreen() + &quot;, &quot; + fcol.getBlue() + &quot; ));\n&quot;);
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( ara.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( ara.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(EditText e)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( cnt.getComponent(i) instanceof JList ){
    XJList lst= (XJList)( cnt.getComponent(i) );    
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    Color  bcol = lst.getBackground();
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends ListView{\n&quot; );
    guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + bcol.getRed() + &quot;, &quot; + bcol.getGreen() + &quot;, &quot; + bcol.getBlue() + &quot; ));\n&quot;);
    if( lst.print_create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;(ACTIVITY);\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( lst.print_create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(ListView l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

}

guiconstruct.append( &quot; GUI_created( layout );\n}\n&quot; );
guideclare.append( guiconstruct.toString() );
guideclare.append( &quot;}\n&quot; );

String s1 = guideclare.toString();
String s2 = &quot;&quot;;
for( int p = 0; p &lt; s1.length(); p++ ){
  char c = s1.charAt(p);
  if( c == &apos;&lt;&apos; ) s2 = s2 + &quot;&amp;lt;&quot;;
  else if( c == &apos;&gt;&apos; ) s2 = s2 + &quot;&amp;gt;&quot;;
  else if( c == &apos;&amp;&apos; ) s2 = s2 + &quot;&amp;amp;&quot;;
  else if( c == &apos;\&apos;&apos; ) s2 =s2 + &quot;&amp;apos;&quot;;
  else if( c == &apos;\&quot;&apos; ) s2 = s2 + &quot;&amp;quot;&quot;;
  else s2 = s2 + c;
}

xml = xml + &quot;&lt;codeclip&gt;&lt;ID&gt;_CXSTART&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;300&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;codetext&gt;&quot; + s2 + &quot;&lt;/codetext&gt;&lt;/codeclip&gt;\n&quot;
          + &quot;&lt;ID_maker&gt;&quot; + (j+20) + &quot;&lt;/ID_maker&gt;&lt;height&gt;&quot; + (18*j+76) + &quot;&lt;/height&gt;&lt;/aobject&gt;\n&quot;;

f1 = new XFile(&quot;GUI.xml&quot;);
f1.Xdelete();
f1.Xappend( xml );
</codetext>
</operation>
<operation>
<ID>_O46</ID>
<state1>_S18</state1>
<state2>_S26</state2>
<x0>199</x0>
<y0>287</y0>
<width>155</width>
<height>63</height>
<inconnectx0>132</inconnectx0>
<inconnecty0>42</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>45</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>72</inpinx0>
<inpiny0>51</inpiny0>
<inpinwidth>68</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>エディット画面を
セーブする
</description>
<codetext>int i, j;
Container cnt = ウィンドウ.getContentPane();

f1 = new XFile(  &quot;Layout.dat&quot; );
f1.Xdelete();

Color col = ((Component)cnt).getBackground();
f1.Xappend( editwindow.getTitle() + &quot;\n&quot; + cnt.getWidth() +&quot;\n&quot; +cnt.getHeight() +&quot;\n&quot; + col.getRed()+ &quot;\n&quot;+ col.getGreen()+&quot;\n&quot;+col.getBlue()+&quot;\n&quot; );

for( i=cnt.getComponentCount()-1,j=0;i&gt;=0;i--){

  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    String txt = lbl.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();

    String imagefile = lbl.ImageFile;
    if( imagefile==null || imagefile.equals(&quot;&quot;) || (!( new XFile(imagefile) ).isFile() ) ) imagefile = &quot;null&quot;;

    int ax = lbl.getHorizontalAlignment();
    int ay = lbl.getVerticalAlignment();

    f1.Xappend( &quot;LABEL;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot;+ imagefile + &quot;;&quot; + ax + &quot;;&quot; + ay + &quot;;&quot; );
    if( lbl.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lbl.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lbl.print_paint_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( lbl.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    String txt = btn.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();

    String imagefile = btn.ImageFile;
    if( imagefile==null || imagefile.equals(&quot;&quot;) || (!( new XFile(imagefile) ).isFile() ) ) imagefile = &quot;null&quot;;

    int ax = btn.getHorizontalAlignment();
    int ay = btn.getVerticalAlignment();

    f1.Xappend( &quot;BUTTON;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot;+ imagefile + &quot;;&quot; + ax + &quot;;&quot; + ay + &quot;;&quot; );
    if( btn.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( btn.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( btn.print_clicked_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( btn.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    String txt = fld.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();

    f1.Xappend( &quot;TEXTFIELD;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( fld.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( fld.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( fld.print_input_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( fld.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.HORIZONTAL ) ){
    XJHSlider sldr= (XJHSlider)( cnt.getComponent(i) );    
    String name = sldr.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    int minval = sldr.getMinimum();
    int maxval = sldr.getMaximum();
    int x0 = sldr.getX();
    int y0 = sldr.getY();
    int wid = sldr.getWidth();
    int hei  = sldr.getHeight();
    Color  fcol = sldr.getForeground();
    Color  bcol = sldr.getBackground();

    f1.Xappend( &quot;HSLIDER;&quot;);
    f1.Xappend(  name + &quot;;&quot; + minval + &quot;;&quot; + maxval + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( sldr.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_changed_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( sldr.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.VERTICAL ) ){
    XJVSlider sldr= (XJVSlider)( cnt.getComponent(i) );    
    String name = sldr.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    int minval = sldr.getMinimum();
    int maxval = sldr.getMaximum();
    int x0 = sldr.getX();
    int y0 = sldr.getY();
    int wid = sldr.getWidth();
    int hei  = sldr.getHeight();
    Color  fcol = sldr.getForeground();
    Color  bcol = sldr.getBackground();

    f1.Xappend( &quot;VSLIDER;&quot;);
    f1.Xappend(  name + &quot;;&quot; + minval + &quot;;&quot; + maxval + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( sldr.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_changed_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( sldr.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    int s1 = 0;
    if ( chk.isSelected() )  s1 =1;
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();

    f1.Xappend( &quot;CHECKBOX;&quot;);
    f1.Xappend(  name + &quot;;&quot;  + s1 + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( chk.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( chk.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( chk.print_check_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( chk.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara=  (XJTextArea)( cnt.getComponent(i) );    
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    String txt = ara.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();

    f1.Xappend( &quot;TEXTAREA;&quot;);
    f1.Xappend(  name + &quot;;&quot; + getFirstLine(txt) + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( ara.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( ara.is_scrollable ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( ara.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( ara.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JList ){
    XJList lst=  (XJList)( cnt.getComponent(i) );    
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    Color  fcol = lst.getForeground();
    Color  bcol = lst.getBackground();
    Font f = lst.getFont();

    f1.Xappend( &quot;LIST;&quot;);
    f1.Xappend(  name + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( lst.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.is_scrollable ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.print_selected_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( lst.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
}
</codetext>
</operation>
</aobject>
<aobject>
<ID>_AX18</ID>
<x0>138</x0>
<y0>85</y0>
<width>247</width>
<height>78</height>
<ID_maker>35</ID_maker>
<objectname>Adder</objectname>
<description>エディタのコントロール部</description>
<action>
<ID>_AX21</ID>
<comp1name>_OX14</comp1name>
<comp2name>_PX20</comp2name>
</action>
<action>
<ID>_AX19</ID>
<comp1name>_PX15</comp1name>
<comp2name>_OX14</comp2name>
</action>
<action>
<ID>_AX13</ID>
<comp1name>_PX12</comp1name>
<comp2name>_OX11</comp2name>
</action>
<action>
<ID>_A30</ID>
<comp1name>_P29</comp1name>
<comp2name>_O28</comp2name>
</action>
<action>
<ID>_A32</ID>
<comp1name>_PX12</comp1name>
<comp2name>_O31</comp2name>
</action>
<action>
<ID>_A33</ID>
<comp1name>_O31</comp1name>
<comp2name>_PX20</comp2name>
</action>
<codeclip>
<ID>_CX16</ID>
<x0>30</x0>
<y0>58</y0>
<width>105</width>
<height>20</height>
<codetext>Component cc;
</codetext>
</codeclip>
<codeclip>
<ID>_CX17</ID>
<x0>429</x0>
<y0>27</y0>
<width>67</width>
<height>21</height>
<codetext>int xx,yy;
</codetext>
</codeclip>
<operation>
<ID>_O28</ID>
<state1>_SINIT</state1>
<state2>_S27</state2>
<x0>381</x0>
<y0>316</y0>
<width>131</width>
<height>54</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>34</inconnecty0>
<outconnectx0>47</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>91</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ロードモードに
遷移する</description>
<codetext></codetext>
</operation>
<operation>
<ID>_O31</ID>
<state1>_S27</state1>
<state2>_SINIT</state2>
<x0>162</x0>
<y0>121</y0>
<width>220</width>
<height>51</height>
<inconnectx0>200</inconnectx0>
<inconnecty0>33</inconnecty0>
<outconnectx0>61</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in(Component c1)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>105</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out(Component c2)</outpintext>
<outpinx0>104</outpinx0>
<outpiny0>30</outpiny0>
<outpinwidth>117</outpinwidth>
<outpinheight>22</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを貼り付ける


</description>
<codetext>c2=c1;
</codetext>
</operation>
<operation>
<ID>_OX11</ID>
<state1>_SINIT</state1>
<state2>_SX10</state2>
<x0>25</x0>
<y0>82</y0>
<width>117</width>
<height>93</height>
<inconnectx0>96</inconnectx0>
<inconnecty0>76</inconnecty0>
<outconnectx0>98</outconnectx0>
<outconnecty0>14</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>70</inpiny0>
<inpinwidth>100</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>貼り付けモードに
遷移する</description>
<codetext>cc = c;
</codetext>
</operation>
<operation>
<ID>_OX14</ID>
<state1>_SX10</state1>
<state2>_SX18</state2>
<x0>386</x0>
<y0>53</y0>
<width>183</width>
<height>73</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>16</inconnecty0>
<outconnectx0>164</outconnectx0>
<outconnecty0>33</outconnecty0>
<inpintext>in(int x,int y)</inpintext>
<inpinx0>112</inpinx0>
<inpiny0>10</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>21</outpinx0>
<outpiny0>53</outpiny0>
<outpinwidth>107</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
貼り付ける</description>
<codetext>xx=x;
yy=y;
c=cc;
</codetext>
</operation>
<operation>
<ID>_OX22</ID>
<state1>_SX18</state1>
<state2>_SINIT</state2>
<x0>436</x0>
<y0>182</y0>
<width>177</width>
<height>60</height>
<inconnectx0>160</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>17</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>貼り付けたコンポーネントを
クリック位置に移動させる</description>
<codetext>cc.setBounds(xx,yy,140,35);
</codetext>
</operation>
<pin>
<ID>_P29</ID>
<x0>549</x0>
<y0>353</y0>
<width>58</width>
<height>31</height>
<text>isLoad()</text>
<px>66</px>
<py>42</py>
</pin>
<pin>
<ID>_PX12</ID>
<x0>6</x0>
<y0>240</y0>
<width>122</width>
<height>27</height>
<text>paste(Component c)</text>
<px>122</px>
<py>24</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>654</x0>
<y0>29</y0>
<width>100</width>
<height>24</height>
<text>clickAt(int x,int y)</text>
<px>135</px>
<py>39</py>
</pin>
<pin>
<ID>_PX20</ID>
<x0>403</x0>
<y0>150</y0>
<width>114</width>
<height>24</height>
<text>add(Component c)</text>
<px>129</px>
<py>57</py>
</pin>
<state>
<ID>_S27</ID>
<x0>372</x0>
<y0>247</y0>
<width>86</width>
<height>41</height>
<text>  ロードモード</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>225</x0>
<y0>289</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX10</ID>
<x0>243</x0>
<y0>39</y0>
<width>94</width>
<height>38</height>
<text> 貼り付けモード</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SX18</ID>
<x0>605</x0>
<y0>125</y0>
<width>99</width>
<height>36</height>
<text> 位置決めモード</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<xobject>
<ID>_X69</ID>
<x0>576</x0>
<y0>123</y0>
<width>204</width>
<height>106</height>
<ID_maker>84</ID_maker>
<objectname>WindowProperty</objectname>
<description></description>
<aobject>
<ID>_AX6</ID>
<x0>61</x0>
<y0>78</y0>
<width>155</width>
<height>126</height>
<ID_maker>12</ID_maker>
<objectname>GridPanel</objectname>
<description>GridLayoutに設定されたコンテナ
行数と列数は変数rowとcolumnで設定する
</description>
<action>
<ID>_AX11</ID>
<comp1name>_PX3</comp1name>
<comp2name>_OX9</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX2</comp2name>
</action>
<action>
<ID>_AX8</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX7</comp2name>
</action>
<codeclip>
<ID>_CX4</ID>
<x0>95</x0>
<y0>70</y0>
<width>99</width>
<height>21</height>
<codetext>JPanel panel;
</codetext>
</codeclip>
<operation>
<ID>_OX6</ID>
<state1>_SINIT</state1>
<state2>_SX5</state2>
<x0>106</x0>
<y0>94</y0>
<width>82</width>
<height>49</height>
<inconnectx0>1</inconnectx0>
<inconnecty0>15</inconnecty0>
<outconnectx0>62</outconnectx0>
<outconnecty0>9</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>初期設定
</description>
<codetext>panel = new JPanel();
panel.setLayout(new GridLayout(row, column));
</codetext>
</operation>
<operation>
<ID>_OX7</ID>
<state1>_SX5</state1>
<state2>_SX5</state2>
<x0>301</x0>
<y0>27</y0>
<width>136</width>
<height>84</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>13</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>13</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>35</inpinx0>
<inpiny0>62</inpiny0>
<inpinwidth>101</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
自分に加える</description>
<codetext>panel.add(c);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX5</state1>
<state2>_SX5</state2>
<x0>302</x0>
<y0>127</y0>
<width>142</width>
<height>87</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>19</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>19</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>66</inpiny0>
<inpinwidth>28</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out(Container c)</outpintext>
<outpinx0>35</outpinx0>
<outpiny0>66</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>上位コンポーネントに
自分を加える</description>
<codetext>c = panel;
</codetext>
</operation>
<pin>
<ID>_PX1</ID>
<x0>472</x0>
<y0>56</y0>
<width>116</width>
<height>32</height>
<text>add(Component c)</text>
<px>13</px>
<py>55</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>476</x0>
<y0>170</y0>
<width>114</width>
<height>31</height>
<text>join(Container c)</text>
<px>29</px>
<py>32</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>198</x0>
<y0>189</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>99</px>
<py>78</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>17</x0>
<y0>69</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX5</ID>
<x0>212</x0>
<y0>74</y0>
<width>70</width>
<height>40</height>
<text>  待機状態</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<xobject>
<ID>_X30</ID>
<x0>70</x0>
<y0>221</y0>
<width>216</width>
<height>122</height>
<ID_maker>129</ID_maker>
<objectname>Properties</objectname>
<description></description>
<xobject>
<ID>_XX64</ID>
<x0>76</x0>
<y0>117</y0>
<width>529</width>
<height>35</height>
<ID_maker>47</ID_maker>
<objectname>BackColor</objectname>
<description></description>
<aobject>
<ID>_AX33</ID>
<x0>194</x0>
<y0>23</y0>
<width>193</width>
<height>96</height>
<ID_maker>13</ID_maker>
<objectname>Xbutton</objectname>
<description>ボタンオブジェクト</description>
<action>
<ID>_AX12</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX9</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_CX1</ID>
<x0>85</x0>
<y0>23</y0>
<width>327</width>
<height>17</height>
<codetext>//ボタンをクリックするとClickピンに信号が出力される
inbutton b;//ボタンのインスタンス
class inbutton extends JButton implements ActionListener{
Xbutton parent;
inbutton(Xbutton prnt){
parent=prnt;
addActionListener(this);
setText(ButtonName);
}

public void actionPerformed(ActionEvent e){
parent.Click();
}
}
</codetext>
</codeclip>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SX8</state2>
<x0>380</x0>
<y0>74</y0>
<width>138</width>
<height>93</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>32</inconnecty0>
<outconnectx0>119</outconnectx0>
<outconnecty0>29</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>54</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>72</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)b;
</codetext>
</operation>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>100</x0>
<y0>81</y0>
<width>153</width>
<height>57</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>26</inconnecty0>
<outconnectx0>134</outconnectx0>
<outconnecty0>25</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>ボタンのインスタンスを
生成する
</description>
<codetext>b= new inbutton(this);
</codetext>
</operation>
<pin>
<ID>_PX11</ID>
<x0>235</x0>
<y0>148</y0>
<width>60</width>
<height>30</height>
<text>Ready()</text>
<px>12</px>
<py>34</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>199</x0>
<y0>40</y0>
<width>60</width>
<height>30</height>
<text>Click()</text>
<px>111</px>
<py>56</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>178</x0>
<y0>187</y0>
<width>122</width>
<height>32</height>
<text>Join(Component c)</text>
<px>79</px>
<py>75</py>
</pin>
<state>
<ID>_SX8</ID>
<x0>537</x0>
<y0>91</y0>
<width>70</width>
<height>40</height>
<text> 待機状態2</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>13</x0>
<y0>95</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX4</ID>
<x0>286</x0>
<y0>94</y0>
<width>70</width>
<height>40</height>
<text>  待機状態1</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<aobject>
<ID>_AX27</ID>
<x0>403</x0>
<y0>49</y0>
<width>155</width>
<height>111</height>
<ID_maker>22</ID_maker>
<objectname>Control</objectname>
<description></description>
<action>
<ID>_AX21</ID>
<comp1name>_PX20</comp1name>
<comp2name>_OX19</comp2name>
</action>
<action>
<ID>_AX18</ID>
<comp1name>_PX15</comp1name>
<comp2name>_OX17</comp2name>
</action>
<action>
<ID>_AX14</ID>
<comp1name>_PX13</comp1name>
<comp2name>_OX12</comp2name>
</action>
<action>
<ID>_AX11</ID>
<comp1name>_PX10</comp1name>
<comp2name>_OX9</comp2name>
</action>
<action>
<ID>_AX4</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX3</comp2name>
</action>
<codeclip>
<ID>_CX6</ID>
<x0>37</x0>
<y0>22</y0>
<width>165</width>
<height>20</height>
<codetext>Color color = Color.gray;
</codetext>
</codeclip>
<codeclip>
<ID>_CX5</ID>
<x0>36</x0>
<y0>0</y0>
<width>164</width>
<height>21</height>
<codetext>Component cmp,display;
</codetext>
</codeclip>
<operation>
<ID>_OX17</ID>
<state1>_SINIT</state1>
<state2>_SX16</state2>
<x0>311</x0>
<y0>0</y0>
<width>120</width>
<height>66</height>
<inconnectx0>1</inconnectx0>
<inconnecty0>33</inconnecty0>
<outconnectx0>101</outconnectx0>
<outconnecty0>29</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>81</inpinx0>
<inpiny0>10</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>色設定
モードに遷移する</description>
<codetext></codetext>
</operation>
<operation>
<ID>_OX12</ID>
<state1>_SX16</state1>
<state2>_SINIT</state2>
<x0>317</x0>
<y0>190</y0>
<width>119</width>
<height>79</height>
<inconnectx0>99</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in(Color c)</inpintext>
<inpinx0>43</inpinx0>
<inpiny0>58</inpiny0>
<inpinwidth>77</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>取得した色で
コンポーネントの
背景色を設定する
</description>
<codetext>color=c;
cmp.setBackground(color);
display.setBackground(color);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>174</x0>
<y0>189</y0>
<width>116</width>
<height>79</height>
<inconnectx0>109</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>110</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>15</inpinx0>
<inpiny0>60</inpiny0>
<inpinwidth>102</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>色表示のための
コンポーネントを
取得する</description>
<codetext>display=c;
display.setBackground(color);
</codetext>
</operation>
<operation>
<ID>_OX3</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>7</x0>
<y0>190</y0>
<width>144</width>
<height>77</height>
<inconnectx0>123</inconnectx0>
<inconnecty0>1</inconnecty0>
<outconnectx0>123</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>61</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>17</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントの
背景色を取得する</description>
<codetext>cmp=f.getContentPane();
color = cmp.getBackground();
display.setBackground(color);
</codetext>
</operation>
<operation>
<ID>_OX19</ID>
<state1>_SX16</state1>
<state2>_SINIT</state2>
<x0>313</x0>
<y0>95</y0>
<width>113</width>
<height>56</height>
<inconnectx0>93</inconnectx0>
<inconnecty0>13</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>18</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>82</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>32</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>設定を取り消す</description>
<codetext></codetext>
</operation>
<pin>
<ID>_PX15</ID>
<x0>497</x0>
<y0>5</y0>
<width>60</width>
<height>30</height>
<text>request()</text>
<px>88</px>
<py>30</py>
</pin>
<pin>
<ID>_PX13</ID>
<x0>359</x0>
<y0>302</y0>
<width>77</width>
<height>26</height>
<text>get(Color c)</text>
<px>4</px>
<py>88</py>
</pin>
<pin>
<ID>_PX10</ID>
<x0>168</x0>
<y0>301</y0>
<width>145</width>
<height>25</height>
<text>getDisplay(Component c)</text>
<px>4</px>
<py>49</py>
</pin>
<pin>
<ID>_PX1</ID>
<x0>3</x0>
<y0>297</y0>
<width>86</width>
<height>22</height>
<text>get(JFrame f)</text>
<px>27</px>
<py>66</py>
</pin>
<pin>
<ID>_PX20</ID>
<x0>501</x0>
<y0>223</y0>
<width>55</width>
<height>24</height>
<text>cansel()</text>
<px>98</px>
<py>88</py>
</pin>
<state>
<ID>_SX16</ID>
<x0>479</x0>
<y0>95</y0>
<width>91</width>
<height>42</height>
<text> RequestMode</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>173</x0>
<y0>101</y0>
<width>70</width>
<height>40</height>
<text> InitialState</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<aobject>
<ID>_AX6</ID>
<x0>3</x0>
<y0>146</y0>
<width>250</width>
<height>142</height>
<ID_maker>23</ID_maker>
<objectname>XLabel</objectname>
<description>ラベルの内部オブジェクト
マウスイベントを発生する
</description>
<action>
<ID>_AX19</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_CX13</ID>
<x0>129</x0>
<y0>0</y0>
<width>89</width>
<height>20</height>
<codetext>inlabel lbl;
class inlabel extends JLabel implements MouseListener, MouseMotionListener{
inlabel(String s){
setText(s);
setOpaque(true);
setBackground(Color.lightGray);
addMouseListener(this);
addMouseMotionListener(this);
}
public void mouseClicked(MouseEvent e){ Click();Clicked((Component)this);}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
public void mousePressed(MouseEvent e){ pressed( (Component)this, e.getX(), e.getY()); }
public void mouseReleased(MouseEvent e){}
public void mouseDragged(MouseEvent e){ drugged( (Component)this, e.getX(), e.getY()); }
public void mouseMoved(MouseEvent e){}
}
</codetext>
</codeclip>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>59</x0>
<y0>142</y0>
<width>159</width>
<height>63</height>
<inconnectx0>138</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>139</outconnectx0>
<outconnecty0>37</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>84</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ラベルのインスタンスを
生成する
</description>
<codetext>lbl= new  inlabel(LabelName);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SINIT</state2>
<x0>357</x0>
<y0>129</y0>
<width>143</width>
<height>82</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>56</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>12</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>103</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>37</outpinx0>
<outpiny0>61</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)lbl;
</codetext>
</operation>
<pin>
<ID>_PX16</ID>
<x0>218</x0>
<y0>21</y0>
<width>189</width>
<height>23</height>
<text>drugged(Component c, int x,int y)</text>
<px>0</px>
<py>78</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>217</x0>
<y0>0</y0>
<width>190</width>
<height>21</height>
<text>pressed(Component c, int x,int y)</text>
<px>0</px>
<py>59</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>407</x0>
<y0>1</y0>
<width>143</width>
<height>21</height>
<text>Clicked(Component c)</text>
<px>0</px>
<py>99</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>396</x0>
<y0>242</y0>
<width>122</width>
<height>32</height>
<text>Join(Component c)</text>
<px>104</px>
<py>119</py>
</pin>
<pin>
<ID>_PX11</ID>
<x0>121</x0>
<y0>239</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>206</px>
<py>29</py>
</pin>
<pin>
<ID>_PX22</ID>
<x0>407</x0>
<y0>21</y0>
<width>47</width>
<height>23</height>
<text>Click()</text>
<px>88</px>
<py>5</py>
</pin>
<state>
<ID>_SX4</ID>
<x0>251</x0>
<y0>198</y0>
<width>70</width>
<height>40</height>
<text>    状態1</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>254</x0>
<y0>117</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<codeclip>
<ID>_CX38</ID>
<x0>250</x0>
<y0>0</y0>
<width>190</width>
<height>29</height>
<codetext>String ButtonName=&quot;変える&quot;;
</codetext>
</codeclip>
<codeclip>
<ID>_CX7</ID>
<x0>13</x0>
<y0>322</y0>
<width>204</width>
<height>28</height>
<codetext>String LabelName=&quot;土台の色&quot;;
</codetext>
</codeclip>
<pin>
<ID>_PX21</ID>
<x0>373</x0>
<y0>210</y0>
<width>77</width>
<height>22</height>
<text>get(Color c)</text>
<px>460</px>
<py>8</py>
</pin>
<pin>
<ID>_PX20</ID>
<x0>497</x0>
<y0>20</y0>
<width>41</width>
<height>23</height>
<text>color()</text>
<px>416</px>
<py>11</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>422</x0>
<y0>258</y0>
<width>80</width>
<height>26</height>
<text>get(JFrame f)</text>
<px>104</px>
<py>11</py>
</pin>
<pin>
<ID>_PX4</ID>
<x0>116</x0>
<y0>73</y0>
<width>42</width>
<height>24</height>
<text>start()</text>
<px>206</px>
<py>11</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>273</x0>
<y0>260</y0>
<width>107</width>
<height>26</height>
<text>join(Component c)</text>
<px>257</px>
<py>8</py>
</pin>
<pin>
<ID>_PX43</ID>
<x0>524</x0>
<y0>204</y0>
<width>60</width>
<height>30</height>
<text>cansel()</text>
<px>365</px>
<py>9</py>
</pin>
<relation>
<ID>_RX44</ID>
<pin1name>_PX43</pin1name>
<pin2name>_AX27(_PX20)</pin2name>
</relation>
<relation>
<ID>_RX42</ID>
<pin1name>_AX27(_PX15)</pin1name>
<pin2name>_PX20</pin2name>
</relation>
<relation>
<ID>_RX41</ID>
<pin1name>_AX33(_PX2)</pin1name>
<pin2name>_AX27(_PX15)</pin2name>
</relation>
<relation>
<ID>_RX39</ID>
<pin1name>_AX33(_PX6)</pin1name>
<pin2name>_PX5</pin2name>
</relation>
<relation>
<ID>_RX37</ID>
<pin1name>_AX33(_PX6)</pin1name>
<pin2name>_AX27(_PX10)</pin2name>
</relation>
<relation>
<ID>_R45</ID>
<pin1name>_PX4</pin1name>
<pin2name>_AX6(_PX11)</pin2name>
</relation>
<relation>
<ID>_R46</ID>
<pin1name>_AX6(_PX11)</pin1name>
<pin2name>_AX33(_PX11)</pin2name>
</relation>
<relation>
<ID>_RX31</ID>
<pin1name>_PX21</pin1name>
<pin2name>_AX27(_PX13)</pin2name>
</relation>
<relation>
<ID>_RX29</ID>
<pin1name>_PX3</pin1name>
<pin2name>_AX27(_PX1)</pin2name>
</relation>
<relation>
<ID>_RX25</ID>
<pin1name>_AX6(_PX6)</pin1name>
<pin2name>_PX5</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X120</ID>
<x0>75</x0>
<y0>76</y0>
<width>529</width>
<height>33</height>
<ID_maker>22</ID_maker>
<objectname>Title</objectname>
<description></description>
<aobject>
<ID>_AX6</ID>
<x0>7</x0>
<y0>130</y0>
<width>222</width>
<height>160</height>
<ID_maker>23</ID_maker>
<objectname>XLabel</objectname>
<description>ラベルの内部オブジェクト
マウスイベントを発生する
</description>
<action>
<ID>_AX19</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_CX13</ID>
<x0>129</x0>
<y0>0</y0>
<width>89</width>
<height>20</height>
<codetext>inlabel lbl;
class inlabel extends JLabel implements MouseListener, MouseMotionListener{
inlabel(String s){
setText(s);
setOpaque(true);
setBackground(Color.lightGray);
addMouseListener(this);
addMouseMotionListener(this);
}
public void mouseClicked(MouseEvent e){ Click();Clicked((Component)this);}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
public void mousePressed(MouseEvent e){ pressed( (Component)this, e.getX(), e.getY()); }
public void mouseReleased(MouseEvent e){}
public void mouseDragged(MouseEvent e){ drugged( (Component)this, e.getX(), e.getY()); }
public void mouseMoved(MouseEvent e){}
}
</codetext>
</codeclip>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>59</x0>
<y0>142</y0>
<width>159</width>
<height>63</height>
<inconnectx0>138</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>139</outconnectx0>
<outconnecty0>37</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>84</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ラベルのインスタンスを
生成する
</description>
<codetext>lbl= new  inlabel(LabelName);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SINIT</state2>
<x0>357</x0>
<y0>129</y0>
<width>143</width>
<height>82</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>56</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>12</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>103</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>37</outpinx0>
<outpiny0>61</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)lbl;
</codetext>
</operation>
<pin>
<ID>_PX16</ID>
<x0>218</x0>
<y0>21</y0>
<width>189</width>
<height>23</height>
<text>drugged(Component c, int x,int y)</text>
<px>0</px>
<py>70</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>217</x0>
<y0>0</y0>
<width>190</width>
<height>21</height>
<text>pressed(Component c, int x,int y)</text>
<px>4</px>
<py>86</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>407</x0>
<y0>1</y0>
<width>143</width>
<height>21</height>
<text>Clicked(Component c)</text>
<px>10</px>
<py>103</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>396</x0>
<y0>242</y0>
<width>122</width>
<height>32</height>
<text>Join(Component c)</text>
<px>113</px>
<py>56</py>
</pin>
<pin>
<ID>_PX11</ID>
<x0>121</x0>
<y0>239</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>174</px>
<py>36</py>
</pin>
<pin>
<ID>_PX22</ID>
<x0>407</x0>
<y0>21</y0>
<width>47</width>
<height>23</height>
<text>Click()</text>
<px>88</px>
<py>5</py>
</pin>
<state>
<ID>_SX4</ID>
<x0>251</x0>
<y0>198</y0>
<width>70</width>
<height>40</height>
<text>    状態1</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>254</x0>
<y0>117</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<aobject>
<ID>_AX8</ID>
<x0>257</x0>
<y0>136</y0>
<width>338</width>
<height>83</height>
<ID_maker>18</ID_maker>
<objectname>Field</objectname>
<description></description>
<action>
<ID>_AX14</ID>
<comp1name>_PX3</comp1name>
<comp2name>_OX13</comp2name>
</action>
<action>
<ID>_AX12</ID>
<comp1name>_PX2</comp1name>
<comp2name>_OX11</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX8</comp1name>
<comp2name>_PX5</comp2name>
</action>
<action>
<ID>_AX9</ID>
<comp1name>_PX4</comp1name>
<comp2name>_OX8</comp2name>
</action>
<codeclip>
<ID>_CX15</ID>
<x0>37</x0>
<y0>75</y0>
<width>119</width>
<height>21</height>
<codetext>JFrame frm;
</codetext>
</codeclip>
<codeclip>
<ID>_CX1</ID>
<x0>35</x0>
<y0>52</y0>
<width>129</width>
<height>18</height>
<codetext>intextfield data;
class intextfield extends JTextField implements ActionListener{
intextfield(String s){
setText(s);
addActionListener(this);
}
public void actionPerformed(ActionEvent e){ enter(); }
}
</codetext>
</codeclip>
<operation>
<ID>_OX7</ID>
<state1>_SINIT</state1>
<state2>_SX6</state2>
<x0>64</x0>
<y0>216</y0>
<width>80</width>
<height>54</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>68</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>初期設定</description>
<codetext>data =new intextfield(&quot; &quot;);
</codetext>
</operation>
<operation>
<ID>_OX8</ID>
<state1>_SX6</state1>
<state2>_SX6</state2>
<x0>177</x0>
<y0>205</y0>
<width>144</width>
<height>69</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>104</inpinx0>
<inpiny0>29</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>39</outpinx0>
<outpiny0>49</outpiny0>
<outpinwidth>105</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>上位コンポーネントに
自分を加える</description>
<codetext>c=data;
</codetext>
</operation>
<operation>
<ID>_OX11</ID>
<state1>_SX6</state1>
<state2>_SX6</state2>
<x0>225</x0>
<y0>110</y0>
<width>132</width>
<height>78</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>61</inpinx0>
<inpiny0>54</inpiny0>
<inpinwidth>72</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウの
タイトルを得る</description>
<codetext>frm =f;
data.setText(frm.getTitle());
</codetext>
</operation>
<operation>
<ID>_OX13</ID>
<state1>_SX6</state1>
<state2>_SX6</state2>
<x0>221</x0>
<y0>13</y0>
<width>132</width>
<height>85</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>31</inpinx0>
<inpiny0>64</inpiny0>
<inpinwidth>102</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウの
タイトルを
セットする</description>
<codetext>frm.setTitle(data.getText());
</codetext>
</operation>
<pin>
<ID>_PX2</ID>
<x0>396</x0>
<y0>154</y0>
<width>84</width>
<height>22</height>
<text>get(JFrame f)</text>
<px>230</px>
<py>5</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>419</x0>
<y0>64</y0>
<width>56</width>
<height>25</height>
<text>update()</text>
<px>156</px>
<py>5</py>
</pin>
<pin>
<ID>_PX4</ID>
<x0>355</x0>
<y0>217</y0>
<width>41</width>
<height>26</height>
<text>start()</text>
<px>90</px>
<py>30</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>335</x0>
<y0>282</y0>
<width>111</width>
<height>27</height>
<text>join(Component c)</text>
<px>6</px>
<py>50</py>
</pin>
<pin>
<ID>_PX16</ID>
<x0>131</x0>
<y0>29</y0>
<width>46</width>
<height>23</height>
<text>enter()</text>
<px>160</px>
<py>54</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>10</x0>
<y0>108</y0>
<width>70</width>
<height>40</height>
<text> InitialState</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX6</ID>
<x0>128</x0>
<y0>108</y0>
<width>70</width>
<height>40</height>
<text>    State1</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<codeclip>
<ID>_CX7</ID>
<x0>16</x0>
<y0>101</y0>
<width>192</width>
<height>21</height>
<codetext>String LabelName=&quot;タイトル&quot;;
</codetext>
</codeclip>
<pin>
<ID>_PX2</ID>
<x0>407</x0>
<y0>76</y0>
<width>59</width>
<height>22</height>
<text>update()</text>
<px>364</px>
<py>11</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>483</x0>
<y0>75</y0>
<width>82</width>
<height>25</height>
<text>get(JFrame f)</text>
<px>104</px>
<py>12</py>
</pin>
<pin>
<ID>_PX4</ID>
<x0>278</x0>
<y0>76</y0>
<width>40</width>
<height>28</height>
<text>start()</text>
<px>210</px>
<py>12</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>261</x0>
<y0>274</y0>
<width>107</width>
<height>26</height>
<text>join(Component c)</text>
<px>260</px>
<py>10</py>
</pin>
<relation>
<ID>_RX17</ID>
<pin1name>_AX8(_PX16)</pin1name>
<pin2name>_AX8(_PX3)</pin2name>
</relation>
<relation>
<ID>_R20</ID>
<pin1name>_PX4</pin1name>
<pin2name>_AX6(_PX11)</pin2name>
</relation>
<relation>
<ID>_R21</ID>
<pin1name>_AX6(_PX11)</pin1name>
<pin2name>_AX8(_PX4)</pin2name>
</relation>
<relation>
<ID>_RX14</ID>
<pin1name>_PX3</pin1name>
<pin2name>_AX8(_PX2)</pin2name>
</relation>
<relation>
<ID>_RX13</ID>
<pin1name>_PX2</pin1name>
<pin2name>_AX8(_PX3)</pin2name>
</relation>
<relation>
<ID>_RX10</ID>
<pin1name>_AX8(_PX5)</pin1name>
<pin2name>_PX5</pin2name>
</relation>
<relation>
<ID>_RX9</ID>
<pin1name>_AX6(_PX6)</pin1name>
<pin2name>_AX8(_PX5)</pin2name>
</relation>
</xobject>
<pin>
<ID>_PX39</ID>
<x0>542</x0>
<y0>246</y0>
<width>69</width>
<height>22</height>
<text>get(Color c)</text>
<px>139</px>
<py>103</py>
</pin>
<pin>
<ID>_PX35</ID>
<x0>487</x0>
<y0>269</y0>
<width>41</width>
<height>23</height>
<text>color()</text>
<px>18</px>
<py>99</py>
</pin>
<pin>
<ID>_PX7</ID>
<x0>289</x0>
<y0>19</y0>
<width>39</width>
<height>21</height>
<text>start()</text>
<px>91</px>
<py>29</py>
</pin>
<pin>
<ID>_PX1</ID>
<x0>179</x0>
<y0>43</y0>
<width>86</width>
<height>25</height>
<text>get(JFrame f)</text>
<px>81</px>
<py>78</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>434</x0>
<y0>207</y0>
<width>52</width>
<height>22</height>
<text>cansel()</text>
<px>76</px>
<py>101</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>352</x0>
<y0>41</y0>
<width>111</width>
<height>20</height>
<text>join(Component c)</text>
<px>5</px>
<py>46</py>
</pin>
<relation>
<ID>_R114</ID>
<pin1name>_PX39</pin1name>
<pin2name>_XX64(_PX21)</pin2name>
</relation>
<relation>
<ID>_R115</ID>
<pin1name>_XX64(_PX20)</pin1name>
<pin2name>_PX35</pin2name>
</relation>
<relation>
<ID>_R121</ID>
<pin1name>_PX7</pin1name>
<pin2name>_X120(_PX4)</pin2name>
</relation>
<relation>
<ID>_R123</ID>
<pin1name>_X120(_PX4)</pin1name>
<pin2name>_XX64(_PX4)</pin2name>
</relation>
<relation>
<ID>_R124</ID>
<pin1name>_X120(_PX5)</pin1name>
<pin2name>_PX5</pin2name>
</relation>
<relation>
<ID>_R125</ID>
<pin1name>_XX64(_PX5)</pin1name>
<pin2name>_X120(_PX5)</pin2name>
</relation>
<relation>
<ID>_R126</ID>
<pin1name>_PX1</pin1name>
<pin2name>_X120(_PX3)</pin2name>
</relation>
<relation>
<ID>_R127</ID>
<pin1name>_X120(_PX3)</pin1name>
<pin2name>_XX64(_PX3)</pin2name>
</relation>
<relation>
<ID>_R128</ID>
<pin1name>_PX2</pin1name>
<pin2name>_XX64(_PX43)</pin2name>
</relation>
</xobject>
<aobject>
<ID>_A49</ID>
<x0>224</x0>
<y0>69</y0>
<width>145</width>
<height>85</height>
<ID_maker>12</ID_maker>
<objectname>VBoxPanel</objectname>
<description>縦方向のBoxLayoutに設定されたコンテナ
</description>
<action>
<ID>_AX11</ID>
<comp1name>_PX3</comp1name>
<comp2name>_OX9</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX2</comp2name>
</action>
<action>
<ID>_AX8</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX7</comp2name>
</action>
<codeclip>
<ID>_CX4</ID>
<x0>95</x0>
<y0>70</y0>
<width>99</width>
<height>21</height>
<codetext>JPanel panel;
</codetext>
</codeclip>
<operation>
<ID>_OX6</ID>
<state1>_SINIT</state1>
<state2>_SX5</state2>
<x0>106</x0>
<y0>94</y0>
<width>82</width>
<height>49</height>
<inconnectx0>1</inconnectx0>
<inconnecty0>15</inconnecty0>
<outconnectx0>62</outconnectx0>
<outconnecty0>9</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>初期設定
</description>
<codetext>panel = new JPanel();
panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
</codetext>
</operation>
<operation>
<ID>_OX7</ID>
<state1>_SX5</state1>
<state2>_SX5</state2>
<x0>301</x0>
<y0>27</y0>
<width>136</width>
<height>84</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>13</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>13</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>35</inpinx0>
<inpiny0>62</inpiny0>
<inpinwidth>101</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
自分に加える</description>
<codetext>panel.add(c);
mainwindow.getContentPane().validate();
mainwindow.getContentPane().repaint();
mainwindow.pack();
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX5</state1>
<state2>_SX5</state2>
<x0>302</x0>
<y0>127</y0>
<width>142</width>
<height>87</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>19</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>19</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>66</inpiny0>
<inpinwidth>28</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out(Container c)</outpintext>
<outpinx0>35</outpinx0>
<outpiny0>66</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>上位コンポーネントに
自分を加える</description>
<codetext>c = panel;
</codetext>
</operation>
<pin>
<ID>_PX1</ID>
<x0>472</x0>
<y0>56</y0>
<width>116</width>
<height>32</height>
<text>add(Component c)</text>
<px>17</px>
<py>41</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>476</x0>
<y0>170</y0>
<width>114</width>
<height>31</height>
<text>join(Container c)</text>
<px>23</px>
<py>62</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>198</x0>
<y0>189</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>103</px>
<py>18</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>17</x0>
<y0>69</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX5</ID>
<x0>212</x0>
<y0>74</y0>
<width>70</width>
<height>40</height>
<text>  待機状態</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<xobject>
<ID>_X69</ID>
<x0>387</x0>
<y0>84</y0>
<width>152</width>
<height>97</height>
<ID_maker>6</ID_maker>
<objectname>Label1</objectname>
<description>新しいオブジェクト</description>
<aobject>
<ID>_A0</ID>
<x0>257</x0>
<y0>140</y0>
<width>140</width>
<height>122</height>
<ID_maker>23</ID_maker>
<objectname>XLabel</objectname>
<description>ラベルの内部オブジェクト
マウスイベントを発生する
</description>
<action>
<ID>_AX19</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_CX13</ID>
<x0>129</x0>
<y0>0</y0>
<width>89</width>
<height>20</height>
<codetext>inlabel lbl;
class inlabel extends JLabel implements MouseListener, MouseMotionListener{
inlabel(String s){
setAlignmentX(JComponent.CENTER_ALIGNMENT);
setText(s);
setOpaque(true);
setBackground(Color.lightGray);
addMouseListener(this);
addMouseMotionListener(this);
}
public void mouseClicked(MouseEvent e){ Click();Clicked((Component)this);}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
public void mousePressed(MouseEvent e){ pressed( (Component)this, e.getX(), e.getY()); }
public void mouseReleased(MouseEvent e){}
public void mouseDragged(MouseEvent e){ drugged( (Component)this, e.getX(), e.getY()); }
public void mouseMoved(MouseEvent e){}
}
</codetext>
</codeclip>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>59</x0>
<y0>142</y0>
<width>159</width>
<height>63</height>
<inconnectx0>138</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>139</outconnectx0>
<outconnecty0>37</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>84</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ラベルのインスタンスを
生成する
</description>
<codetext>lbl= new  inlabel(LabelName);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SINIT</state2>
<x0>357</x0>
<y0>129</y0>
<width>143</width>
<height>82</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>56</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>12</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>103</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>37</outpinx0>
<outpiny0>61</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)lbl;
</codetext>
</operation>
<pin>
<ID>_PX16</ID>
<x0>218</x0>
<y0>21</y0>
<width>189</width>
<height>23</height>
<text>drugged(Component c, int x,int y)</text>
<px>291</px>
<py>64</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>217</x0>
<y0>0</y0>
<width>190</width>
<height>21</height>
<text>pressed(Component c, int x,int y)</text>
<px>305</px>
<py>42</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>407</x0>
<y0>1</y0>
<width>143</width>
<height>21</height>
<text>Clicked(Component c)</text>
<px>310</px>
<py>83</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>396</x0>
<y0>242</y0>
<width>122</width>
<height>32</height>
<text>Join(Component c)</text>
<px>12</px>
<py>48</py>
</pin>
<pin>
<ID>_PX11</ID>
<x0>121</x0>
<y0>239</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>27</px>
<py>94</py>
</pin>
<pin>
<ID>_PX22</ID>
<x0>407</x0>
<y0>21</y0>
<width>47</width>
<height>23</height>
<text>Click()</text>
<px>160</px>
<py>0</py>
</pin>
<state>
<ID>_SX4</ID>
<x0>251</x0>
<y0>198</y0>
<width>70</width>
<height>40</height>
<text>    状態1</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>254</x0>
<y0>117</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<codeclip>
<ID>_C1</ID>
<x0>225</x0>
<y0>92</y0>
<width>245</width>
<height>31</height>
<codetext>String LabelName=&quot;&lt;GUIのプロパティ&gt;&quot;;
</codetext>
</codeclip>
<pin>
<ID>_P2</ID>
<x0>447</x0>
<y0>161</y0>
<width>116</width>
<height>27</height>
<text>join(Component c)</text>
<px>36</px>
<py>26</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>453</x0>
<y0>244</y0>
<width>60</width>
<height>30</height>
<text>start()</text>
<px>18</px>
<py>72</py>
</pin>
<relation>
<ID>_R4</ID>
<pin1name>_A0(_PX6)</pin1name>
<pin2name>_P2</pin2name>
</relation>
<relation>
<ID>_R5</ID>
<pin1name>_P3</pin1name>
<pin2name>_A0(_PX11)</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X70</ID>
<x0>388</x0>
<y0>194</y0>
<width>152</width>
<height>78</height>
<ID_maker>6</ID_maker>
<objectname>Label2</objectname>
<description>新しいオブジェクト</description>
<aobject>
<ID>_A0</ID>
<x0>257</x0>
<y0>140</y0>
<width>140</width>
<height>122</height>
<ID_maker>23</ID_maker>
<objectname>XLabel</objectname>
<description>ラベルの内部オブジェクト
マウスイベントを発生する
</description>
<action>
<ID>_AX19</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_CX13</ID>
<x0>129</x0>
<y0>0</y0>
<width>89</width>
<height>20</height>
<codetext>inlabel lbl;
class inlabel extends JLabel implements MouseListener, MouseMotionListener{
inlabel(String s){
setAlignmentX(JComponent.CENTER_ALIGNMENT);
setText(s);
setOpaque(true);
setBackground(Color.lightGray);
addMouseListener(this);
addMouseMotionListener(this);
}
public void mouseClicked(MouseEvent e){ Click();Clicked((Component)this);}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
public void mousePressed(MouseEvent e){ pressed( (Component)this, e.getX(), e.getY()); }
public void mouseReleased(MouseEvent e){}
public void mouseDragged(MouseEvent e){ drugged( (Component)this, e.getX(), e.getY()); }
public void mouseMoved(MouseEvent e){}
}
</codetext>
</codeclip>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>59</x0>
<y0>142</y0>
<width>159</width>
<height>63</height>
<inconnectx0>138</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>139</outconnectx0>
<outconnecty0>37</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>84</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ラベルのインスタンスを
生成する
</description>
<codetext>lbl= new  inlabel(LabelName);
</codetext>
</operation>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SINIT</state2>
<x0>357</x0>
<y0>129</y0>
<width>143</width>
<height>82</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>56</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>12</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>103</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>37</outpinx0>
<outpiny0>61</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)lbl;
</codetext>
</operation>
<pin>
<ID>_PX16</ID>
<x0>218</x0>
<y0>21</y0>
<width>189</width>
<height>23</height>
<text>drugged(Component c, int x,int y)</text>
<px>291</px>
<py>64</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>217</x0>
<y0>0</y0>
<width>190</width>
<height>21</height>
<text>pressed(Component c, int x,int y)</text>
<px>305</px>
<py>42</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>407</x0>
<y0>1</y0>
<width>143</width>
<height>21</height>
<text>Clicked(Component c)</text>
<px>310</px>
<py>83</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>396</x0>
<y0>242</y0>
<width>122</width>
<height>32</height>
<text>Join(Component c)</text>
<px>12</px>
<py>48</py>
</pin>
<pin>
<ID>_PX11</ID>
<x0>121</x0>
<y0>239</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>27</px>
<py>94</py>
</pin>
<pin>
<ID>_PX22</ID>
<x0>407</x0>
<y0>21</y0>
<width>47</width>
<height>23</height>
<text>Click()</text>
<px>160</px>
<py>0</py>
</pin>
<state>
<ID>_SX4</ID>
<x0>251</x0>
<y0>198</y0>
<width>70</width>
<height>40</height>
<text>    状態1</text>
<isinitstate>0</isinitstate>
</state>
<state>
<ID>_SINIT</ID>
<x0>254</x0>
<y0>117</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<codeclip>
<ID>_C1</ID>
<x0>225</x0>
<y0>92</y0>
<width>279</width>
<height>28</height>
<codetext>String LabelName=&quot;&lt;コンポーネントの種類 &gt;&quot;;
</codetext>
</codeclip>
<pin>
<ID>_P2</ID>
<x0>447</x0>
<y0>161</y0>
<width>116</width>
<height>27</height>
<text>join(Component c)</text>
<px>35</px>
<py>31</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>453</x0>
<y0>244</y0>
<width>60</width>
<height>30</height>
<text>start()</text>
<px>21</px>
<py>56</py>
</pin>
<relation>
<ID>_R4</ID>
<pin1name>_A0(_PX6)</pin1name>
<pin2name>_P2</pin2name>
</relation>
<relation>
<ID>_R5</ID>
<pin1name>_P3</pin1name>
<pin2name>_A0(_PX11)</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_CX16</ID>
<x0>44</x0>
<y0>46</y0>
<width>136</width>
<height>22</height>
<codetext>int row=0,column=2;
</codetext>
</codeclip>
<pin>
<ID>_P46</ID>
<x0>231</x0>
<y0>178</y0>
<width>125</width>
<height>31</height>
<text>Property(Container c)</text>
<px>77</px>
<py>36</py>
</pin>
<pin>
<ID>_PX27</ID>
<x0>135</x0>
<y0>368</y0>
<width>60</width>
<height>30</height>
<text>cansel()</text>
<px>119</px>
<py>73</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>388</x0>
<y0>23</y0>
<width>43</width>
<height>26</height>
<text>Start()</text>
<px>6</px>
<py>38</py>
</pin>
<pin>
<ID>_PX1</ID>
<x0>307</x0>
<y0>323</y0>
<width>102</width>
<height>24</height>
<text>get(JFrame f)</text>
<px>5</px>
<py>78</py>
</pin>
<pin>
<ID>_PX23</ID>
<x0>59</x0>
<y0>370</y0>
<width>60</width>
<height>30</height>
<text>color()</text>
<px>159</px>
<py>60</py>
</pin>
<pin>
<ID>_PX24</ID>
<x0>206</x0>
<y0>371</y0>
<width>73</width>
<height>28</height>
<text>get(Color c)</text>
<px>75</px>
<py>57</py>
</pin>
<relation>
<ID>_R54</ID>
<pin1name>_PX3</pin1name>
<pin2name>_A49(_PX3)</pin2name>
</relation>
<relation>
<ID>_R79</ID>
<pin1name>_A49(_PX3)</pin1name>
<pin2name>_X69(_P3)</pin2name>
</relation>
<relation>
<ID>_R31</ID>
<pin1name>_X30(_PX5)</pin1name>
<pin2name>_AX6(_PX1)</pin2name>
</relation>
<relation>
<ID>_R59</ID>
<pin1name>_A49(_PX2)</pin1name>
<pin2name>_P46</pin2name>
</relation>
<relation>
<ID>_R60</ID>
<pin1name>_PX1</pin1name>
<pin2name>_X30(_PX1)</pin2name>
</relation>
<relation>
<ID>_R65</ID>
<pin1name>_X30(_PX35)</pin1name>
<pin2name>_PX23</pin2name>
</relation>
<relation>
<ID>_R62</ID>
<pin1name>_PX24</pin1name>
<pin2name>_X30(_PX39)</pin2name>
</relation>
<relation>
<ID>_R80</ID>
<pin1name>_X69(_P2)</pin1name>
<pin2name>_A49(_PX1)</pin2name>
</relation>
<relation>
<ID>_R83</ID>
<pin1name>_X70(_P2)</pin1name>
<pin2name>_X69(_P2)</pin2name>
</relation>
<relation>
<ID>_R56</ID>
<pin1name>_AX6(_PX3)</pin1name>
<pin2name>_X30(_PX7)</pin2name>
</relation>
<relation>
<ID>_R75</ID>
<pin1name>_X69(_P3)</pin1name>
<pin2name>_AX6(_PX3)</pin2name>
</relation>
<relation>
<ID>_R58</ID>
<pin1name>_AX6(_PX2)</pin1name>
<pin2name>_A49(_PX1)</pin2name>
</relation>
<relation>
<ID>_R63</ID>
<pin1name>_PX27</pin1name>
<pin2name>_X30(_PX2)</pin2name>
</relation>
<relation>
<ID>_R77</ID>
<pin1name>_X30(_PX7)</pin1name>
<pin2name>_X70(_P3)</pin2name>
</relation>
</xobject>
<aobject>
<ID>_A84</ID>
<x0>235</x0>
<y0>167</y0>
<width>148</width>
<height>75</height>
<ID_maker>27</ID_maker>
<objectname>Remover</objectname>
<description>エディタのコントロール部</description>
<action>
<ID>_AX9</ID>
<comp1name>_OX5</comp1name>
<comp2name>_PX8</comp2name>
</action>
<action>
<ID>_AX7</ID>
<comp1name>_PX6</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX4</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX3</comp2name>
</action>
<operation>
<ID>_OX3</ID>
<state1>_SINIT</state1>
<state2>_SX2</state2>
<x0>75</x0>
<y0>175</y0>
<width>157</width>
<height>77</height>
<inconnectx0>137</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>137</outconnectx0>
<outconnecty0>51</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>87</inpinx0>
<inpiny0>54</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>24</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件  s.equals(&quot;DEL&quot;)
削除モードに
遷移する</description>
<codetext></codetext>
</operation>
<operation>
<ID>_OX5</ID>
<state1>_SX2</state1>
<state2>_SINIT</state2>
<x0>379</x0>
<y0>163</y0>
<width>168</width>
<height>90</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>60</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>1</outconnecty0>
<inpintext>in(Component c)</inpintext>
<inpinx0>65</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>103</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out(Component cmp)</outpintext>
<outpinx0>42</outpinx0>
<outpiny0>66</outpiny0>
<outpinwidth>126</outpinwidth>
<outpinheight>24</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>コンポーネントを
削除する</description>
<codetext>cmp=c;
</codetext>
</operation>
<pin>
<ID>_PX1</ID>
<x0>135</x0>
<y0>315</y0>
<width>90</width>
<height>28</height>
<text>cmd(String s)</text>
<px>60</px>
<py>56</py>
</pin>
<pin>
<ID>_PX6</ID>
<x0>582</x0>
<y0>158</y0>
<width>136</width>
<height>26</height>
<text>selected(Component c)</text>
<px>12</px>
<py>38</py>
</pin>
<pin>
<ID>_PX8</ID>
<x0>546</x0>
<y0>268</y0>
<width>130</width>
<height>29</height>
<text>remove(Component c)</text>
<px>17</px>
<py>24</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>264</x0>
<y0>123</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX2</ID>
<x0>271</x0>
<y0>263</y0>
<width>79</width>
<height>39</height>
<text>  削除モード</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<xobject>
<ID>_X94</ID>
<x0>140</x0>
<y0>249</y0>
<width>240</width>
<height>73</height>
<ID_maker>20</ID_maker>
<objectname>Loader</objectname>
<description>新しいオブジェクト</description>
<aobject>
<ID>_A0</ID>
<x0>421</x0>
<y0>134</y0>
<width>185</width>
<height>87</height>
<ID_maker>16</ID_maker>
<objectname>XLoader</objectname>
<description>新しいオブジェクト</description>
<action>
<ID>_A8</ID>
<comp1name>_P3</comp1name>
<comp2name>_O4</comp2name>
</action>
<action>
<ID>_A12</ID>
<comp1name>_P1</comp1name>
<comp2name>_O11</comp2name>
</action>
<codeclip>
<ID>_C7</ID>
<x0>118</x0>
<y0>11</y0>
<width>255</width>
<height>41</height>
<codetext>JFrame window;      //ウィンドウ
BufferedReader din;//ロードするファイル
</codetext>
</codeclip>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_S6</state2>
<x0>40</x0>
<y0>88</y0>
<width>139</width>
<height>71</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>120</outconnectx0>
<outconnecty0>16</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>49</inpiny0>
<inpinwidth>90</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウを取得する</description>
<codetext>window =f;
</codetext>
</operation>
<operation>
<ID>_O11</ID>
<state1>_S6</state1>
<state2>_S6</state2>
<x0>310</x0>
<y0>126</y0>
<width>139</width>
<height>81</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>8</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>61</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>69</inpinx0>
<inpiny0>58</inpiny0>
<inpinwidth>71</inpinwidth>
<inpinheight>23</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>102</outpinx0>
<outpiny0>35</outpiny0>
<outpinwidth>39</outpinwidth>
<outpinheight>24</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ロードを開始する
</description>
<codetext>JPanel panel= null;
String line;

try{
//System.out.println(s);
din = new BufferedReader( new FileReader(s) );
window.setTitle( din.readLine() );
int wid = parseInt( din.readLine() );
int hei = parseInt( din.readLine() );
panel = (JPanel)(window.getContentPane());
panel.removeAll();
panel.setBackground( new Color( parseInt( din.readLine() ),parseInt( din.readLine() ),parseInt( din.readLine() ) ) );
panel.setPreferredSize( new Dimension( wid, hei ) );
panel.setSize( wid, hei );
window.pack();
put(window);
} catch( IOException ie ) { System.out.println(&quot;file: [&quot;+s+&quot;] format error&quot;);}
try{
while( ( line=din.readLine() )!=null ){
//   System.out.println(&quot;line&quot;+line);
   isLoad();
   Load(line);
}
din.close();
} catch( IOException ie ) {System.out.println(&quot;data error&quot;);}
panel.validate();
</codetext>
</operation>
<pin>
<ID>_P0</ID>
<x0>453</x0>
<y0>180</y0>
<width>85</width>
<height>25</height>
<text>Load(String s)</text>
<px>87</px>
<py>67</py>
</pin>
<pin>
<ID>_P1</ID>
<x0>334</x0>
<y0>265</y0>
<width>130</width>
<height>29</height>
<text>open(String filename)</text>
<px>11</px>
<py>27</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>453</x0>
<y0>154</y0>
<width>59</width>
<height>24</height>
<text>isLoad()</text>
<px>7</px>
<py>67</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>44</x0>
<y0>207</y0>
<width>96</width>
<height>26</height>
<text>get(JFrame f)</text>
<px>89</px>
<py>8</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>453</x0>
<y0>126</y0>
<width>85</width>
<height>25</height>
<text>put(JFrame f)</text>
<px>9</px>
<py>46</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>3</x0>
<y0>18</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_S6</ID>
<x0>218</x0>
<y0>128</y0>
<width>70</width>
<height>40</height>
<text>     状態１</text>
<isinitstate>0</isinitstate>
</state>
</aobject>
<aobject>
<ID>_A6</ID>
<x0>142</x0>
<y0>124</y0>
<width>259</width>
<height>57</height>
<ID_maker>10</ID_maker>
<objectname>FileSelector</objectname>
<description></description>
<action>
<ID>_AX9</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX8</comp2name>
</action>
<operation>
<ID>_OX8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>255</x0>
<y0>122</y0>
<width>119</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>80</inpinx0>
<inpiny0>44</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ファイル選択
ダイアログを開く</description>
<codetext>JFileChooser chooser = new JFileChooser( &quot;LayoutLib&quot; );
chooser.setDialogTitle( &quot;レイアウト情報のロード&quot; );
chooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
if( chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION ){
    selected( chooser.getSelectedFile().getPath() );
}
else cansel();
</codetext>
</operation>
<pin>
<ID>_PX1</ID>
<x0>395</x0>
<y0>215</y0>
<width>60</width>
<height>30</height>
<text>request()</text>
<px>24</px>
<py>33</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>390</x0>
<y0>104</y0>
<width>62</width>
<height>28</height>
<text>cansel()</text>
<px>206</px>
<py>0</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>389</x0>
<y0>142</y0>
<width>152</width>
<height>23</height>
<text>selected(String fileName)</text>
<px>109</px>
<py>37</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>138</x0>
<y0>82</y0>
<width>70</width>
<height>40</height>
<text> InitialState</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<aobject>
<ID>_A7</ID>
<x0>22</x0>
<y0>120</y0>
<width>104</width>
<height>71</height>
<ID_maker>5</ID_maker>
<objectname>Commander</objectname>
<description>新しいオブジェクト</description>
<action>
<ID>_A2</ID>
<comp1name>_P1</comp1name>
<comp2name>_O0</comp2name>
</action>
<action>
<ID>_A4</ID>
<comp1name>_O0</comp1name>
<comp2name>_P3</comp2name>
</action>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>146</x0>
<y0>48</y0>
<width>170</width>
<height>91</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>get(String cmd)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>70</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>Load()</outpintext>
<outpinx0>119</outpinx0>
<outpiny0>70</outpiny0>
<outpinwidth>51</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件  cmd.equals(&quot;LOAD&quot;)
Load() を発行する</description>
<codetext></codetext>
</operation>
<pin>
<ID>_P1</ID>
<x0>140</x0>
<y0>179</y0>
<width>99</width>
<height>27</height>
<text>get(String cmd)</text>
<px>6</px>
<py>52</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>265</x0>
<y0>180</y0>
<width>51</width>
<height>27</height>
<text>Load()</text>
<px>64</px>
<py>37</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>10</x0>
<y0>11</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<pin>
<ID>_P5</ID>
<x0>410</x0>
<y0>264</y0>
<width>61</width>
<height>25</height>
<text>isLoad()</text>
<px>64</px>
<py>41</py>
</pin>
<pin>
<ID>_P2</ID>
<x0>28</x0>
<y0>255</y0>
<width>88</width>
<height>28</height>
<text>cmd(String s)</text>
<px>155</px>
<py>45</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>499</x0>
<y0>262</y0>
<width>99</width>
<height>26</height>
<text>Load(String s)</text>
<px>2</px>
<py>26</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>512</x0>
<y0>58</y0>
<width>87</width>
<height>26</height>
<text>get(JFrame f)</text>
<px>99</px>
<py>22</py>
</pin>
<pin>
<ID>_P15</ID>
<x0>285</x0>
<y0>196</y0>
<width>86</width>
<height>28</height>
<text>put(JFrame f)</text>
<px>100</px>
<py>6</py>
</pin>
<pin>
<ID>_P17</ID>
<x0>670</x0>
<y0>157</y0>
<width>84</width>
<height>24</height>
<text>open(String f)</text>
<px>1</px>
<py>53</py>
</pin>
<relation>
<ID>_R8</ID>
<pin1name>_P2</pin1name>
<pin2name>_A7(_P1)</pin2name>
</relation>
<relation>
<ID>_R9</ID>
<pin1name>_A7(_P3)</pin1name>
<pin2name>_A6(_PX1)</pin2name>
</relation>
<relation>
<ID>_R10</ID>
<pin1name>_A6(_PX5)</pin1name>
<pin2name>_A0(_P1)</pin2name>
</relation>
<relation>
<ID>_R11</ID>
<pin1name>_A0(_P2)</pin1name>
<pin2name>_P5</pin2name>
</relation>
<relation>
<ID>_R12</ID>
<pin1name>_A0(_P0)</pin1name>
<pin2name>_P3</pin2name>
</relation>
<relation>
<ID>_R14</ID>
<pin1name>_P13</pin1name>
<pin2name>_A0(_P3)</pin2name>
</relation>
<relation>
<ID>_R16</ID>
<pin1name>_A0(_P15)</pin1name>
<pin2name>_P15</pin2name>
</relation>
<relation>
<ID>_R18</ID>
<pin1name>_P17</pin1name>
<pin2name>_A0(_P1)</pin2name>
</relation>
</xobject>
<xobject>
<ID>_X147</ID>
<x0>598</x0>
<y0>313</y0>
<width>121</width>
<height>80</height>
<ID_maker>7</ID_maker>
<objectname>プログラム終了</objectname>
<description>新しいオブジェクト</description>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>213</x0>
<y0>59</y0>
<width>142</width>
<height>65</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>45</inpiny0>
<inpinwidth>69</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>102</outpinx0>
<outpiny0>45</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件: s.equals(&quot;QUIT&quot;)</description>
<codetext></codetext>
</operation>
<operation>
<ID>_O1</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>372</x0>
<y0>58</y0>
<width>119</width>
<height>66</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>46</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description>プログラム終了</description>
<codetext>System.exit(0);
</codetext>
</operation>
<pin>
<ID>_P2</ID>
<x0>208</x0>
<y0>160</y0>
<width>78</width>
<height>26</height>
<text>cmd(String s)</text>
<px>0</px>
<py>59</py>
</pin>
<relation>
<ID>_R3</ID>
<pin1name>_P2</pin1name>
<pin2name>_O0</pin2name>
</relation>
<relation>
<ID>_R4</ID>
<pin1name>_O0</pin1name>
<pin2name>_O1</pin2name>
</relation>
<pin>
<ID>_P5</ID>
<x0>373</x0>
<y0>160</y0>
<width>39</width>
<height>29</height>
<text>exit()</text>
<px>0</px>
<py>40</py>
</pin>
<relation>
<ID>_R6</ID>
<pin1name>_P5</pin1name>
<pin2name>_O1</pin2name>
</relation>
</xobject>
<relation>
<ID>_R148</ID>
<pin1name>_A67(_PX12)</pin1name>
<pin2name>_X147(_P5)</pin2name>
</relation>
<codeclip>
<ID>_CX8</ID>
<x0>229</x0>
<y0>37</y0>
<width>293</width>
<height>24</height>
<codetext>int width=400,height=300;//GraphicPanelのサイズ
</codetext>
</codeclip>
<pin>
<ID>_P81</ID>
<x0>471</x0>
<y0>412</y0>
<width>86</width>
<height>26</height>
<text>cmd(String s)</text>
<px>41</px>
<py>102</py>
</pin>
<pin>
<ID>_PX1</ID>
<x0>3</x0>
<y0>103</y0>
<width>124</width>
<height>29</height>
<text>paste(Component c)</text>
<px>30</px>
<py>70</py>
</pin>
<pin>
<ID>_PX4</ID>
<x0>577</x0>
<y0>89</y0>
<width>42</width>
<height>27</height>
<text>Start()</text>
<px>117</px>
<py>141</py>
</pin>
<pin>
<ID>_PX17</ID>
<x0>20</x0>
<y0>201</y0>
<width>130</width>
<height>25</height>
<text>clicked(Component c)</text>
<px>23</px>
<py>84</py>
</pin>
<pin>
<ID>_P73</ID>
<x0>652</x0>
<y0>84</y0>
<width>125</width>
<height>31</height>
<text>Property(Container c)</text>
<px>6</px>
<py>166</py>
</pin>
<pin>
<ID>_P75</ID>
<x0>648</x0>
<y0>286</y0>
<width>72</width>
<height>21</height>
<text>get(Color c)</text>
<px>101</px>
<py>29</py>
</pin>
<pin>
<ID>_P76</ID>
<x0>730</x0>
<y0>282</y0>
<width>46</width>
<height>28</height>
<text>color()</text>
<px>118</px>
<py>13</py>
</pin>
<pin>
<ID>_P77</ID>
<x0>691</x0>
<y0>241</y0>
<width>54</width>
<height>25</height>
<text>cansel()</text>
<px>114</px>
<py>0</py>
</pin>
<pin>
<ID>_P106</ID>
<x0>15</x0>
<y0>270</y0>
<width>99</width>
<height>26</height>
<text>Load(String s)</text>
<px>83</px>
<py>54</py>
</pin>
<pin>
<ID>_P132</ID>
<x0>24</x0>
<y0>296</y0>
<width>81</width>
<height>29</height>
<text>open(String f)</text>
<px>45</px>
<py>123</py>
</pin>
<relation>
<ID>_R82</ID>
<pin1name>_PX4</pin1name>
<pin2name>_X69(_PX3)</pin2name>
</relation>
<relation>
<ID>_RX24</ID>
<pin1name>_PX1</pin1name>
<pin2name>_AX18(_PX12)</pin2name>
</relation>
<relation>
<ID>_RX23</ID>
<pin1name>_AX18(_PX20)</pin1name>
<pin2name>_AX9(_PX40)</pin2name>
</relation>
<relation>
<ID>_RX22</ID>
<pin1name>_AX9(_PX4)</pin1name>
<pin2name>_AX18(_PX15)</pin2name>
</relation>
<relation>
<ID>_R86</ID>
<pin1name>_A84(_PX8)</pin1name>
<pin2name>_AX9(_PX43)</pin2name>
</relation>
<relation>
<ID>_R83</ID>
<pin1name>_X69(_PX3)</pin1name>
<pin2name>_AX9(_PX25)</pin2name>
</relation>
<relation>
<ID>_R119</ID>
<pin1name>_AX9(_PX3)</pin1name>
<pin2name>_A67(_PX2)</pin2name>
</relation>
<relation>
<ID>_R140</ID>
<pin1name>_A67(_P26)</pin1name>
<pin2name>_X69(_PX1)</pin2name>
</relation>
<relation>
<ID>_R144</ID>
<pin1name>_A67(_P26)</pin1name>
<pin2name>_A56(_P1)</pin2name>
</relation>
<relation>
<ID>_R74</ID>
<pin1name>_X69(_P46)</pin1name>
<pin2name>_P73</pin2name>
</relation>
<relation>
<ID>_R78</ID>
<pin1name>_P77</pin1name>
<pin2name>_X69(_PX27)</pin2name>
</relation>
<relation>
<ID>_R79</ID>
<pin1name>_X69(_PX23)</pin1name>
<pin2name>_P76</pin2name>
</relation>
<relation>
<ID>_R80</ID>
<pin1name>_P75</pin1name>
<pin2name>_X69(_PX24)</pin2name>
</relation>
<relation>
<ID>_R87</ID>
<pin1name>_PX17</pin1name>
<pin2name>_A84(_PX6)</pin2name>
</relation>
<relation>
<ID>_R107</ID>
<pin1name>_X94(_P3)</pin1name>
<pin2name>_P106</pin2name>
</relation>
<relation>
<ID>_R108</ID>
<pin1name>_X94(_P2)</pin1name>
<pin2name>_A84(_PX1)</pin2name>
</relation>
<relation>
<ID>_R110</ID>
<pin1name>_P81</pin1name>
<pin2name>_A56(_P5)</pin2name>
</relation>
<relation>
<ID>_R117</ID>
<pin1name>_X94(_P5)</pin1name>
<pin2name>_AX18(_P29)</pin2name>
</relation>
<relation>
<ID>_R149</ID>
<pin1name>_A56(_P5)</pin1name>
<pin2name>_X147(_P2)</pin2name>
</relation>
<relation>
<ID>_R131</ID>
<pin1name>_X94(_P15)</pin1name>
<pin2name>_X69(_PX1)</pin2name>
</relation>
<relation>
<ID>_R133</ID>
<pin1name>_P132</pin1name>
<pin2name>_X94(_P17)</pin2name>
</relation>
<pin>
<ID>_P136</ID>
<x0>593</x0>
<y0>246</y0>
<width>80</width>
<height>26</height>
<text>out(JFrame f)</text>
<px>5</px>
<py>43</py>
</pin>
<relation>
<ID>_R142</ID>
<pin1name>_X69(_PX1)</pin1name>
<pin2name>_P136</pin2name>
</relation>
<xobject>
<ID>_X151</ID>
<x0>141</x0>
<y0>329</y0>
<width>240</width>
<height>73</height>
<ID_maker>23</ID_maker>
<objectname>Saver</objectname>
<description>新しいオブジェクト</description>
<aobject>
<ID>_A6</ID>
<x0>142</x0>
<y0>124</y0>
<width>259</width>
<height>57</height>
<ID_maker>10</ID_maker>
<objectname>FileSelector</objectname>
<description></description>
<action>
<ID>_AX9</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX8</comp2name>
</action>
<operation>
<ID>_OX8</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>255</x0>
<y0>122</y0>
<width>119</width>
<height>64</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>0</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>0</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>80</inpinx0>
<inpiny0>44</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ファイル選択
ダイアログを開く</description>
<codetext>JFileChooser chooser = new JFileChooser( &quot;LayoutLib&quot; );
chooser.setDialogTitle( &quot;レイアウト情報の保存&quot; );
chooser.setFileSelectionMode( JFileChooser.FILES_AND_DIRECTORIES );
if( chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION ){
    selected( chooser.getSelectedFile().getPath() );
}
else cansel();
</codetext>
</operation>
<pin>
<ID>_PX1</ID>
<x0>395</x0>
<y0>215</y0>
<width>60</width>
<height>30</height>
<text>request()</text>
<px>24</px>
<py>33</py>
</pin>
<pin>
<ID>_PX3</ID>
<x0>390</x0>
<y0>104</y0>
<width>62</width>
<height>28</height>
<text>cansel()</text>
<px>206</px>
<py>0</py>
</pin>
<pin>
<ID>_PX5</ID>
<x0>389</x0>
<y0>142</y0>
<width>152</width>
<height>23</height>
<text>selected(String fileName)</text>
<px>109</px>
<py>37</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>138</x0>
<y0>82</y0>
<width>70</width>
<height>40</height>
<text> InitialState</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<aobject>
<ID>_A7</ID>
<x0>22</x0>
<y0>120</y0>
<width>104</width>
<height>71</height>
<ID_maker>5</ID_maker>
<objectname>Commander</objectname>
<description>新しいオブジェクト</description>
<action>
<ID>_A2</ID>
<comp1name>_P1</comp1name>
<comp2name>_O0</comp2name>
</action>
<action>
<ID>_A4</ID>
<comp1name>_O0</comp1name>
<comp2name>_P3</comp2name>
</action>
<operation>
<ID>_O0</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>146</x0>
<y0>48</y0>
<width>170</width>
<height>91</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>get(String cmd)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>70</inpiny0>
<inpinwidth>93</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>Load()</outpintext>
<outpinx0>119</outpinx0>
<outpiny0>70</outpiny0>
<outpinwidth>51</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件  cmd.equals(&quot;SAVE&quot;)
Load() を発行する</description>
<codetext></codetext>
</operation>
<pin>
<ID>_P1</ID>
<x0>140</x0>
<y0>179</y0>
<width>99</width>
<height>27</height>
<text>get(String cmd)</text>
<px>6</px>
<py>52</py>
</pin>
<pin>
<ID>_P3</ID>
<x0>265</x0>
<y0>180</y0>
<width>51</width>
<height>27</height>
<text>Load()</text>
<px>64</px>
<py>37</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>10</x0>
<y0>11</y0>
<width>70</width>
<height>40</height>
<text>  初期状態</text>
<isinitstate>1</isinitstate>
</state>
</aobject>
<pin>
<ID>_P2</ID>
<x0>28</x0>
<y0>255</y0>
<width>88</width>
<height>28</height>
<text>cmd(String s)</text>
<px>154</px>
<py>43</py>
</pin>
<pin>
<ID>_P13</ID>
<x0>503</x0>
<y0>56</y0>
<width>87</width>
<height>26</height>
<text>get(JFrame f)</text>
<px>98</px>
<py>24</py>
</pin>
<relation>
<ID>_R8</ID>
<pin1name>_P2</pin1name>
<pin2name>_A7(_P1)</pin2name>
</relation>
<relation>
<ID>_R9</ID>
<pin1name>_A7(_P3)</pin1name>
<pin2name>_A6(_PX1)</pin2name>
</relation>
<aobject>
<ID>_A20</ID>
<x0>409</x0>
<y0>116</y0>
<width>242</width>
<height>69</height>
<ID_maker>20</ID_maker>
<objectname>XSaver</objectname>
<description>ObjectEditor用のファイルをつくる</description>
<action>
<ID>_A6</ID>
<comp1name>_P5</comp1name>
<comp2name>_O4</comp2name>
</action>
<operation>
<ID>_O4</ID>
<state1>_SINIT</state1>
<state2>_S12</state2>
<x0>274</x0>
<y0>168</y0>
<width>140</width>
<height>87</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>59</inconnecty0>
<outconnectx0>109</outconnectx0>
<outconnecty0>74</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>72</inpinx0>
<inpiny0>51</inpiny0>
<inpinwidth>68</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>エディット画面を
セーブする
</description>
<codetext>int i, j;
Container cnt = ウィンドウ.getContentPane();

f1 = new XFile( s );
f1.Xdelete();

Color col = ((Component)cnt).getBackground();
f1.Xappend( editwindow.getTitle() + &quot;\n&quot; + cnt.getWidth() +&quot;\n&quot; +cnt.getHeight() +&quot;\n&quot; + col.getRed()+ &quot;\n&quot;+ col.getGreen()+&quot;\n&quot;+col.getBlue()+&quot;\n&quot; );

for( i=cnt.getComponentCount()-1,j=0;i&gt;=0;i--){

  if( cnt.getComponent(i) instanceof JLabel ){
    XJLabel lbl = (XJLabel)( cnt.getComponent(i) );    
    String name = lbl.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    String txt = lbl.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = lbl.getX();
    int y0 = lbl.getY();
    int wid = lbl.getWidth();
    int hei  = lbl.getHeight();
    Color  fcol = lbl.getForeground();
    Color  bcol = lbl.getBackground();
    Font f = lbl.getFont();

    String imagefile = lbl.ImageFile;
    if( imagefile==null || imagefile.equals(&quot;&quot;) || (!( new XFile(imagefile) ).isFile() ) ) imagefile = &quot;null&quot;;

    int ax = lbl.getHorizontalAlignment();
    int ay = lbl.getVerticalAlignment();

    f1.Xappend( &quot;LABEL;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot;+ imagefile + &quot;;&quot; + ax + &quot;;&quot; + ay + &quot;;&quot; );
    if( lbl.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lbl.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lbl.print_paint_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( lbl.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JButton ){
    XJButton btn = (XJButton)( cnt.getComponent(i) );    
    String name = btn.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    String txt = btn.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = btn.getX();
    int y0 = btn.getY();
    int wid = btn.getWidth();
    int hei  = btn.getHeight();
    Color  fcol = btn.getForeground();
    Color  bcol = btn.getBackground();
    Font f = btn.getFont();

    String imagefile = btn.ImageFile;
    if( imagefile==null || imagefile.equals(&quot;&quot;) || (!( new XFile(imagefile) ).isFile() ) ) imagefile = &quot;null&quot;;

    int ax = btn.getHorizontalAlignment();
    int ay = btn.getVerticalAlignment();

    f1.Xappend( &quot;BUTTON;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot;+ imagefile + &quot;;&quot; + ax + &quot;;&quot; + ay + &quot;;&quot; );
    if( btn.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( btn.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( btn.print_clicked_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( btn.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JTextField ){
    XJTextField fld= (XJTextField)( cnt.getComponent(i) );    
    String name = fld.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    String txt = fld.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = fld.getX();
    int y0 = fld.getY();
    int wid = fld.getWidth();
    int hei  = fld.getHeight();
    Color  fcol = fld.getForeground();
    Color  bcol = fld.getBackground();
    Font f = fld.getFont();

    f1.Xappend( &quot;TEXTFIELD;&quot;);
    f1.Xappend(  name + &quot;;&quot; + txt + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( fld.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( fld.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( fld.print_input_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( fld.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.HORIZONTAL ) ){
    XJHSlider sldr= (XJHSlider)( cnt.getComponent(i) );    
    String name = sldr.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    int minval = sldr.getMinimum();
    int maxval = sldr.getMaximum();
    int x0 = sldr.getX();
    int y0 = sldr.getY();
    int wid = sldr.getWidth();
    int hei  = sldr.getHeight();
    Color  fcol = sldr.getForeground();
    Color  bcol = sldr.getBackground();

    f1.Xappend( &quot;HSLIDER;&quot;);
    f1.Xappend(  name + &quot;;&quot; + minval + &quot;;&quot; + maxval + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( sldr.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_changed_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( sldr.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( ( cnt.getComponent(i) instanceof JSlider ) &amp;&amp; ( ((JSlider)(cnt.getComponent(i))).getOrientation() == SwingConstants.VERTICAL ) ){
    XJVSlider sldr= (XJVSlider)( cnt.getComponent(i) );    
    String name = sldr.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    int minval = sldr.getMinimum();
    int maxval = sldr.getMaximum();
    int x0 = sldr.getX();
    int y0 = sldr.getY();
    int wid = sldr.getWidth();
    int hei  = sldr.getHeight();
    Color  fcol = sldr.getForeground();
    Color  bcol = sldr.getBackground();

    f1.Xappend( &quot;VSLIDER;&quot;);
    f1.Xappend(  name + &quot;;&quot; + minval + &quot;;&quot; + maxval + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( sldr.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( sldr.print_changed_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( sldr.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JCheckBox ){
    XJCheckBox chk= (XJCheckBox)( cnt.getComponent(i) );    
    String name = chk.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    int s1 = 0;
    if ( chk.isSelected() )  s1 =1;
    int x0 = chk.getX();
    int y0 = chk.getY();
    int wid = chk.getWidth();
    int hei  = chk.getHeight();
    Color  fcol = chk.getForeground();
    Color  bcol = chk.getBackground();

    f1.Xappend( &quot;CHECKBOX;&quot;);
    f1.Xappend(  name + &quot;;&quot;  + s1 + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    if( chk.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( chk.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( chk.print_check_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( chk.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JTextArea ){
    XJTextArea ara=  (XJTextArea)( cnt.getComponent(i) );    
    String name = ara.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    String txt = ara.getText();
    if( txt == null || txt.equals(&quot;&quot;)) txt=&quot;null&quot;;
    int x0 = ara.getX();
    int y0 = ara.getY();
    int wid = ara.getWidth();
    int hei  = ara.getHeight();
    Color  fcol = ara.getForeground();
    Color  bcol = ara.getBackground();
    Font f = ara.getFont();

    f1.Xappend( &quot;TEXTAREA;&quot;);
    f1.Xappend(  name + &quot;;&quot; + getFirstLine(txt) + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( ara.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( ara.is_scrollable ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( ara.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( ara.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
  if( cnt.getComponent(i) instanceof JList ){
    XJList lst=  (XJList)( cnt.getComponent(i) );    
    String name = lst.getName();
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    int x0 = lst.getX();
    int y0 = lst.getY();
    int wid = lst.getWidth();
    int hei  = lst.getHeight();
    Color  fcol = lst.getForeground();
    Color  bcol = lst.getBackground();
    Font f = lst.getFont();

    f1.Xappend( &quot;LIST;&quot;);
    f1.Xappend(  name + &quot;;&quot; + x0 + &quot;;&quot; + y0 + &quot;;&quot; + wid + &quot;;&quot; + hei + &quot;;&quot; );
    f1.Xappend( fcol.getRed() + &quot;;&quot; + fcol.getGreen() + &quot;;&quot; + fcol.getBlue() + &quot;;&quot;);
    f1.Xappend(  bcol.getRed() + &quot;;&quot; + bcol.getGreen() + &quot;;&quot; + bcol.getBlue() + &quot;;&quot;);
    f1.Xappend( f.getName() +&quot;;&quot;+ f.getSize() +&quot;;&quot; );
    if( lst.is_opaque ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.is_scrollable ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.print_create_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    if( lst.print_selected_pin ) f1.Xappend(&quot;1;&quot;); else f1.Xappend(&quot;0;&quot;);
    f1.Xappend( lst.super_class+&quot;;&quot; );
    f1.Xappend( &quot;\n&quot; );

  }
}
</codetext>
</operation>
<pin>
<ID>_P5</ID>
<x0>471</x0>
<y0>208</y0>
<width>82</width>
<height>28</height>
<text>open(String fname)</text>
<px>100</px>
<py>45</py>
</pin>
<state>
<ID>_SINIT</ID>
<x0>134</x0>
<y0>243</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_S12</ID>
<x0>467</x0>
<y0>258</y0>
<width>70</width>
<height>40</height>
<text>      状態1</text>
<isinitstate>0</isinitstate>
</state>
<operation>
<ID>_O13</ID>
<state1>_S12</state1>
<state2>_SINIT</state2>
<x0>261</x0>
<y0>278</y0>
<width>143</width>
<height>69</height>
<inconnectx0>124</inconnectx0>
<inconnecty0>16</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>18</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>メニューをセーブする
</description>
<codetext>JMenuBar メニューバー = ウィンドウ.getJMenuBar();
if( メニューバー != null ){
  int i;
  for( i = 0; i &lt; メニューバー.getComponentCount(); i++ ){
    f1.Xappend( メニューを文字列に変換(  (JMenu)メニューバー.getComponent( i ) ) + &quot;END;\n&quot; );
  }
}
</codetext>
</operation>
<codeclip>
<ID>_C14</ID>
<x0>205</x0>
<y0>6</y0>
<width>213</width>
<height>20</height>
<codetext>XFile f1;//出力ファイル
</codetext>
</codeclip>
<codeclip>
<ID>_C15</ID>
<x0>205</x0>
<y0>25</y0>
<width>142</width>
<height>21</height>
<codetext>JFrame ウィンドウ;
</codetext>
</codeclip>
<codeclip>
<ID>_C16</ID>
<x0>180</x0>
<y0>351</y0>
<width>308</width>
<height>20</height>
<codetext>private String メニューを文字列に変換( JMenu m ){
  String s = &quot;Menu;&quot; + m.getText() + &quot;;&quot; + m.getMnemonic() + &quot;;&quot;;
  int i;
  for( i = 0; i &lt; m.getItemCount(); i++){
    s = s + メニューを文字列に変換( (JMenu)m.getItem( i ) );
  }
  return( s + &quot;/Menu;&quot; );
}

</codetext>
</codeclip>
<pin>
<ID>_P17</ID>
<x0>470</x0>
<y0>127</y0>
<width>78</width>
<height>28</height>
<text>get(JFrame f)</text>
<px>101</px>
<py>22</py>
</pin>
<operation>
<ID>_O18</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>279</x0>
<y0>84</y0>
<width>117</width>
<height>68</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>47</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>47</outconnecty0>
<inpintext>in(JFrame f)</inpintext>
<inpinx0>37</inpinx0>
<inpiny0>47</inpiny0>
<inpinwidth>80</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ウィンドウを取得
する</description>
<codetext>ウィンドウ = f;
</codetext>
</operation>
<action>
<ID>_A19</ID>
<comp1name>_P17</comp1name>
<comp2name>_O18</comp2name>
</action>
</aobject>
<relation>
<ID>_R21</ID>
<pin1name>_A6(_PX5)</pin1name>
<pin2name>_A20(_P5)</pin2name>
</relation>
<relation>
<ID>_R22</ID>
<pin1name>_P13</pin1name>
<pin2name>_A20(_P17)</pin2name>
</relation>
</xobject>
<relation>
<ID>_R152</ID>
<pin1name>_A56(_P5)</pin1name>
<pin2name>_X151(_P2)</pin2name>
</relation>
<relation>
<ID>_R153</ID>
<pin1name>_X151(_P2)</pin1name>
<pin2name>_X94(_P2)</pin2name>
</relation>
<relation>
<ID>_R154</ID>
<pin1name>_A56(_P1)</pin1name>
<pin2name>_X151(_P13)</pin2name>
</relation>
<relation>
<ID>_R155</ID>
<pin1name>_X151(_P13)</pin1name>
<pin2name>_X94(_P13)</pin2name>
</relation>
</xobject>
