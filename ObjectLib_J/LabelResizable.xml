<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>_XX7</ID>
<x0>160</x0>
<y0>55</y0>
<width>166</width>
<height>128</height>
<ID_maker>23</ID_maker>
<objectname>LabelResizable</objectname>
<description>ラベル</description>
<relation>
<ID>_RX15</ID>
<pin1name>_AX3(_PX14)</pin1name>
<pin2name>_PX14</pin2name>
</relation>
<relation>
<ID>_RX13</ID>
<pin1name>_AX3(_PX15)</pin1name>
<pin2name>_AX11(_PX1)</pin2name>
</relation>
<relation>
<ID>_RX12</ID>
<pin1name>_AX3(_PX16)</pin1name>
<pin2name>_AX11(_PX2)</pin2name>
</relation>
<relation>
<ID>_RX10</ID>
<pin1name>_PX1</pin1name>
<pin2name>_AX3(_PX11)</pin2name>
</relation>
<relation>
<ID>_RX4</ID>
<pin1name>_AX3(_PX6)</pin1name>
<pin2name>_PX2</pin2name>
</relation>
<pin>
<ID>_PX1</ID>
<x0>41</x0>
<y0>52</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>100</px>
<py>112</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>3</x0>
<y0>85</y0>
<width>116</width>
<height>35</height>
<text>Join(Component c)</text>
<px>36</px>
<py>41</py>
</pin>
<aobject>
<ID>_AX3</ID>
<x0>150</x0>
<y0>33</y0>
<width>222</width>
<height>160</height>
<ID_maker>33</ID_maker>
<objectname>XLabel</objectname>
<description>ラベルの内部オブジェクト
マウスイベントを発生する
</description>
<action>
<ID>_AX19</ID>
<comp1name>_PX11</comp1name>
<comp2name>_OX5</comp2name>
</action>
<action>
<ID>_AX10</ID>
<comp1name>_OX9</comp1name>
<comp2name>_PX6</comp2name>
</action>
<pin>
<ID>_PX22</ID>
<x0>550</x0>
<y0>0</y0>
<width>47</width>
<height>21</height>
<text>Click()</text>
<px>88</px>
<py>5</py>
</pin>
<codeclip>
<ID>_CX13</ID>
<x0>129</x0>
<y0>0</y0>
<width>89</width>
<height>20</height>
<codetext>inlabel lbl;
class inlabel extends XJLabel implements MouseListener, MouseMotionListener{
inlabel(String s){
((XJLabel)this).ImageFile = null;
setText(s);
setOpaque(true);
setBackground(Color.lightGray);
addMouseListener(this);
addMouseMotionListener(this);
}
public void mouseClicked(MouseEvent e){ Click();Clicked((Component)this);}
public void mouseEntered(MouseEvent e){}
public void mouseExited(MouseEvent e){}
public void mousePressed(MouseEvent e){ pressed( (Component)this, e.getX(), e.getY()); }
public void mouseReleased(MouseEvent e){released( (Component)this, e.getX(), e.getY());}
public void mouseDragged(MouseEvent e){ drugged( (Component)this, e.getX(), e.getY()); }
public void mouseMoved(MouseEvent e){}
}
</codetext>
</codeclip>
<pin>
<ID>_PX11</ID>
<x0>115</x0>
<y0>239</y0>
<width>60</width>
<height>30</height>
<text>Start()</text>
<px>29</px>
<py>36</py>
</pin>
<operation>
<ID>_OX9</ID>
<state1>_SX4</state1>
<state2>_SINIT</state2>
<x0>356</x0>
<y0>124</y0>
<width>150</width>
<height>79</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>10</inconnecty0>
<outconnectx0>1</outconnectx0>
<outconnecty0>48</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>103</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>41</outpinx0>
<outpiny0>58</outpiny0>
<outpinwidth>109</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>上位のコンテナに
自分を加える
</description>
<codetext>c=(Component)lbl;
</codetext>
</operation>
<state>
<ID>_SINIT</ID>
<x0>253</x0>
<y0>221</y0>
<width>70</width>
<height>40</height>
<text>   初期状態</text>
<isinitstate>1</isinitstate>
</state>
<state>
<ID>_SX4</ID>
<x0>251</x0>
<y0>80</y0>
<width>70</width>
<height>40</height>
<text>    状態1</text>
<isinitstate>0</isinitstate>
</state>
<operation>
<ID>_OX5</ID>
<state1>_SINIT</state1>
<state2>_SX4</state2>
<x0>41</x0>
<y0>138</y0>
<width>159</width>
<height>63</height>
<inconnectx0>138</inconnectx0>
<inconnecty0>38</inconnecty0>
<outconnectx0>139</outconnectx0>
<outconnecty0>2</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>84</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>47</outpinx0>
<outpiny0>64</outpiny0>
<outpinwidth>104</outpinwidth>
<outpinheight>25</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>ラベルのインスタンスを
生成する
</description>
<codetext>lbl= new  inlabel(LabelName);
</codetext>
</operation>
<pin>
<ID>_PX6</ID>
<x0>249</x0>
<y0>296</y0>
<width>112</width>
<height>24</height>
<text>Join(Component c)</text>
<px>3</px>
<py>52</py>
</pin>
<pin>
<ID>_PX14</ID>
<x0>407</x0>
<y0>1</y0>
<width>143</width>
<height>21</height>
<text>Clicked(Component c)</text>
<px>9</px>
<py>117</py>
</pin>
<pin>
<ID>_PX15</ID>
<x0>217</x0>
<y0>0</y0>
<width>190</width>
<height>21</height>
<text>pressed(Component c, int x,int y)</text>
<px>4</px>
<py>86</py>
</pin>
<pin>
<ID>_PX16</ID>
<x0>217</x0>
<y0>21</y0>
<width>189</width>
<height>23</height>
<text>drugged(Component c, int x,int y)</text>
<px>0</px>
<py>70</py>
</pin>
<pin>
<ID>_P23</ID>
<x0>39</x0>
<y0>413</y0>
<width>89</width>
<height>30</height>
<text>Load(String s)</text>
<px>21</px>
<py>136</py>
</pin>
<operation>
<ID>_O24</ID>
<state1>_SINIT</state1>
<state2>_S25</state2>
<x0>49</x0>
<y0>276</y0>
<width>176</width>
<height>82</height>
<inconnectx0>154</inconnectx0>
<inconnecty0>3</inconnecty0>
<outconnectx0>156</outconnectx0>
<outconnecty0>33</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>61</inpiny0>
<inpinwidth>68</inpinwidth>
<inpinheight>21</inpinheight>
<outpintext>out(Component c)</outpintext>
<outpinx0>66</outpinx0>
<outpiny0>61</outpiny0>
<outpinwidth>110</outpinwidth>
<outpinheight>21</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>条件  s.startsWith(&quot;LABEL&quot;)
インスタンスを
生成する
</description>
<codetext>lbl = new inlabel(&quot; &quot;);
c = lbl;
fld = new StringTokenizer( s, &quot;;&quot; );
String d = fld.nextToken();
</codetext>
</operation>
<state>
<ID>_S25</ID>
<x0>265</x0>
<y0>350</y0>
<width>70</width>
<height>40</height>
<text>      状態２</text>
<isinitstate>0</isinitstate>
</state>
<operation>
<ID>_O26</ID>
<state1>_S25</state1>
<state2>_SINIT</state2>
<x0>381</x0>
<y0>274</y0>
<width>127</width>
<height>80</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>43</inconnecty0>
<outconnectx0>1</outconnectx0>
<outconnecty0>11</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>90</inpinx0>
<inpiny0>20</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>0</inpinlinkcount>
<description>インスタンスの
プロパティを
設定する
</description>
<codetext>lbl.setName( fld.nextToken() );
String s = fld.nextToken();
if( s.equals(&quot;null&quot;)) lbl.setText(&quot;&quot;); else lbl.setText( s );
lbl.setBounds( parseInt(fld.nextToken()),parseInt(fld.nextToken()),parseInt(fld.nextToken()),parseInt(fld.nextToken()) );
lbl.setForeground( new Color( parseInt(fld.nextToken()),parseInt(fld.nextToken()),parseInt(fld.nextToken()) ) );
lbl.setBackground( new Color( parseInt(fld.nextToken()),parseInt(fld.nextToken()),parseInt(fld.nextToken()) ) );
lbl.setFont( new Font( fld.nextToken(),Font.PLAIN,parseInt(fld.nextToken()) ) );
String fn = fld.nextToken();
if( fn.equals(&quot;null&quot;) ) ((XJLabel)lbl).ImageFile =&quot;&quot;;
else{
  ((XJLabel)lbl).ImageFile = fn;
  lbl.setIcon( new ImageIcon( fn ) );
}
lbl.setHorizontalAlignment( parseInt(fld.nextToken()) );
lbl.setVerticalAlignment( parseInt(fld.nextToken()) );
</codetext>
</operation>
<action>
<ID>_A30</ID>
<comp1name>_P23</comp1name>
<comp2name>_O24</comp2name>
</action>
<action>
<ID>_A28</ID>
<comp1name>_O24</comp1name>
<comp2name>_PX6</comp2name>
</action>
<codeclip>
<ID>_C31</ID>
<x0>132</x0>
<y0>49</y0>
<width>258</width>
<height>25</height>
<codetext>StringTokenizer fld;//プロパティフィールド
</codetext>
</codeclip>
<pin>
<ID>_P32</ID>
<x0>404</x0>
<y0>22</y0>
<width>194</width>
<height>22</height>
<text>released(Component c, int x,int y)</text>
<px>3</px>
<py>103</py>
</pin>
</aobject>
<codeclip>
<ID>_CX6</ID>
<x0>132</x0>
<y0>6</y0>
<width>291</width>
<height>22</height>
<codetext>String LabelName=&quot;LABEL&quot;;//ラベルの名前
</codetext>
</codeclip>
<aobject>
<ID>_AX11</ID>
<x0>400</x0>
<y0>65</y0>
<width>202</width>
<height>100</height>
<ID_maker>14</ID_maker>
<objectname>Modefier</objectname>
<description>GUIコンポーネントの大きさを変えたり移動させたりする役割をもつオブジェクト
</description>
<action>
<ID>_AX9</ID>
<comp1name>_PX2</comp1name>
<comp2name>_OX7</comp2name>
</action>
<action>
<ID>_AX8</ID>
<comp1name>_PX1</comp1name>
<comp2name>_OX6</comp2name>
</action>
<state>
<ID>_SINIT</ID>
<x0>264</x0>
<y0>73</y0>
<width>70</width>
<height>40</height>
<text> InitialState</text>
<isinitstate>1</isinitstate>
</state>
<pin>
<ID>_PX1</ID>
<x0>18</x0>
<y0>252</y0>
<width>193</width>
<height>22</height>
<text>pressed(Component c, int x, int y )</text>
<px>4</px>
<py>54</py>
</pin>
<pin>
<ID>_PX2</ID>
<x0>596</x0>
<y0>86</y0>
<width>192</width>
<height>22</height>
<text>drugged(Component c, int x, int y )</text>
<px>3</px>
<py>38</py>
</pin>
<codeclip>
<ID>_CX3</ID>
<x0>20</x0>
<y0>21</y0>
<width>288</width>
<height>19</height>
<codetext>int x0, x1, x2, y0, y1, y2;//コンポーネントの位置
</codetext>
</codeclip>
<codeclip>
<ID>_CX4</ID>
<x0>20</x0>
<y0>41</y0>
<width>271</width>
<height>19</height>
<codetext>int width, height;//コンポーネントの大きさ
</codetext>
</codeclip>
<codeclip>
<ID>_CX5</ID>
<x0>20</x0>
<y0>0</y0>
<width>278</width>
<height>20</height>
<codetext>Component cmp;//操作対象のコンポーネント
</codetext>
</codeclip>
<operation>
<ID>_OX6</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>34</x0>
<y0>92</y0>
<width>195</width>
<height>135</height>
<inconnectx0>176</inconnectx0>
<inconnecty0>33</inconnecty0>
<outconnectx0>178</outconnectx0>
<outconnecty0>32</outconnecty0>
<inpintext>in(Component c, int x, int y)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>117</inpiny0>
<inpinwidth>160</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>操作対象のコンポーネントと
マウスの位置を取得し、
動作モードを設定する
0:移動モード
1:サイズ変更モード
(マウスの位置は右下のとき)</description>
<codetext>cmp = c;
width = cmp.getWidth();
height = cmp.getHeight();
x0 = cmp.getLocation().x;
y0 = cmp.getLocation().y;
if(x&gt;width-10 &amp;&amp; y&gt; height-10 ) mode =1;
else mode =0;
x2=x;
y2=y;
Graphics grp = cmp.getParent().getGraphics();
grp.setXORMode(Color.white);
grp.drawRect( x0+1, y0+1, width-2, height-2);
grp.setPaintMode();
</codetext>
</operation>
<operation>
<ID>_OX7</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>343</x0>
<y0>9</y0>
<width>217</width>
<height>98</height>
<inconnectx0>1</inconnectx0>
<inconnecty0>29</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in(Component c, int x, int y)</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>79</inpiny0>
<inpinwidth>159</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>マウスカーソルの位置に
矩形を描く</description>
<codetext>Graphics grp = cmp.getParent().getGraphics();
grp.setXORMode(Color.white);
grp.drawRect( x0+1, y0+1, width-2, height-2);
x1=x;
y1=y;
if(mode==1){
width=x1+5;
if(width&lt;10) width=10;
height=y1+5;
if(height&lt;10) height=10;
}
else{
x0+=x1-x2;
if(x0&lt;0) x0=0;
y0+=y1-y2;
if(y0&lt;0) y0=0;
}
x2=x1;
y2=y1;
grp.drawRect( x0+1, y0+1, width-2, height-2);
grp.setPaintMode();
</codetext>
</operation>
<codeclip>
<ID>_CX10</ID>
<x0>20</x0>
<y0>59</y0>
<width>143</width>
<height>20</height>
<codetext>int mode;//動作モード
</codetext>
</codeclip>
<pin>
<ID>_P11</ID>
<x0>594</x0>
<y0>223</y0>
<width>198</width>
<height>29</height>
<text>released(Component c, int x,int y)</text>
<px>4</px>
<py>71</py>
</pin>
<operation>
<ID>_O12</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>344</x0>
<y0>136</y0>
<width>226</width>
<height>115</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>30</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>30</outconnecty0>
<inpintext>in(Component c, int x,int y)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>89</inpiny0>
<inpinwidth>160</inpinwidth>
<inpinheight>25</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description>動作モードに応じてマウスカーソル
位置にコンポーネント移動させたり
コンポーネントの大きさを変えたり
する</description>
<codetext>Graphics grp = cmp.getParent().getGraphics();
grp.setXORMode(Color.white);
grp.drawRect( x0+1, y0+1, width-2, height-2);
grp.setPaintMode();
cmp.setBounds( x0, y0, width, height );
cmp.repaint();
</codetext>
</operation>
<action>
<ID>_A13</ID>
<comp1name>_P11</comp1name>
<comp2name>_O12</comp2name>
</action>
</aobject>
<pin>
<ID>_PX14</ID>
<x0>0</x0>
<y0>143</y0>
<width>132</width>
<height>30</height>
<text>clicked(Component c)</text>
<px>14</px>
<py>74</py>
</pin>
<pin>
<ID>_P20</ID>
<x0>72</x0>
<y0>244</y0>
<width>91</width>
<height>29</height>
<text>Load(String s)</text>
<px>9</px>
<py>100</py>
</pin>
<relation>
<ID>_R21</ID>
<pin1name>_P20</pin1name>
<pin2name>_AX3(_P23)</pin2name>
</relation>
<relation>
<ID>_R22</ID>
<pin1name>_AX3(_P32)</pin1name>
<pin2name>_AX11(_P11)</pin2name>
</relation>
</xobject>
