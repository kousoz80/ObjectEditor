<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<codeclip>
<ID>_C40</ID>
<x0>606</x0>
<y0>110</y0>
<width>159</width>
<height>24</height>
<codetext>// 画像操作関数一覧


// 作業変数
 count jj#,ix#,iy#
 long pp#,qq#,px#,py#,gx#,gy#,gx1#,gy1#
 long tx#,ty#,rx#,ry#,ox#,oy#,vx#,vy#
 long vx1#,vy1#,qx#,qy#,co#

// 点を打つ
xdraw_point:
  py#= pop px#=
  if xcolor#=COLOR_CLEAR then end
  py#, xwidth#, * px#, +
  4, * bitmap#, + pp#=
  xcolor#, (pp)!=
  end


// 与えられた座標の色を返す
xget_point:
  py#= pop px#=
  py#, xwidth#, * px#, +
  4, * bitmap#, + pp#=
  (pp)!,  end

  
// 線を引く
// 使用法: gx, gy, gx1, gy1, xdraw_line
xdraw_line:
  gy1#= pop gx1#= pop gy#= pop gx#=
  if xcolor#=COLOR_CLEAR then end

xline:
  gx#, gx1#, - tx#= abs rx#=
  gy#, gy1#, - ty#= abs ry#=
  if ry#&gt;rx# goto xline_y
  if gx#=gx1# then gx#, gy#, xdraw_point end
  
  // モードX
  xline_x:
    1, rx#=
    if tx#&lt;0  then -1, rx#=
    for ix#=0 to tx# step rx#
      ix#, ty#,  * tx#, / gy1#, + ry#=
      ix#, gx1#, + ry#, xdraw_point
    next ix#
    end
    
  xline_y: /* モード　ｙ */
    1, ry#=
    if ty#&lt;0  then -1, ry#=
    for iy#=0 to ty# step ry#
      iy#, tx#,  * ty#, / gx1#, + rx#=
      iy#, gy1#, + rx#, swap xdraw_point
    next iy#
    end
    
// 画像を消去
xgcls:
  xwidth#,  xheight#, * 1, + tt#=
  for ii#=2 to tt#
    xcolor#, (bitmap)!(ii#)=
  next ii#
  end

// 長方形を描いてうめる
// 使用法: gx, gy, gx1, gy1, xfill_rect
xfill_rect: 
  gy1#= pop gx1#= pop gy#= pop gx#=
  if xcolor#=COLOR_CLEAR then end

  1, rx#= ry#=
  if gy#&lt;gy1# then -1, ry#=
  if gx#&lt;gx1# then -1, rx#=
  for iy#=gy1# to gy# step ry#
    for ix#=gx1# to gx# step rx#
      ix#,  iy#, xdraw_point
    next ix#
  next iy#
  end

// 長方形を描く
// 使用法: gx, gy, gx1, gy1, xdraw_rect
xdraw_rect: 
  gy1#= pop gx1#= pop gy#= pop gx#=
  if xcolor#=COLOR_CLEAR then end
  1, rx#= ry#=
  if gy#&lt;gy1# then -1, ry#=
  if gx#&lt;gx1# then -1, rx#=
  for ix#=gx1# to gx# step rx#
    ix#, gy#,  xdraw_point
    ix#, gy1#, xdraw_point
  next ix#
  for iy#=gy1# to gy# step ry#
    gx#,  iy#, xdraw_point
    gx1#, iy#, xdraw_point
  next iy#
  end
  
// 楕円を描いてうめる
// 使用法: gx, gy, gx1, gy1, xfill_circle
xfill_circle:
  xdraw_circle
  ox1#, oy1#, xpaint
  end

// 楕円を描く
// 使用法: gx, gy, gx1, gy1, xdraw_circle
xdraw_circle:
  long ox1#,oy1#
  gy1#= pop gx1#= pop gy#= pop gx#=
  if xcolor#=COLOR_CLEAR then end
  gx#,  vx#=  gy#,  vy#=
  gx1#, vx1#= gy1#, vy1#=
  if gx1#&gt;gx# then gx1#, gx#, swap gx#= swap gx1#=
  if gy1#&gt;gy# then gy1#, gy#, swap gy#= swap gy1#=
  gx#, gx1#, + 2, / ox1#=
  gy#, gy1#, + 2, / oy1#=
  gx#, gx1#, - 2, / qx#=
  if qx#=0 then xline end
  gy#, gy1#, - 2, / qy#=
  if qy#=0 then xline end
  gx#, gx1#=  oy1#, gy1#=
  for ii#=0 to TABLE_N
    qx#, cos2table#(ii#), * 32767, / ox1#, + gx#=
    qy#, sin2table#(ii#), * 32767, / oy1#, + gy#=
    xline
    gx#, gx1#= gy#, gy1#=
  next ii#
  end


// 塗る
xpaint:
  const Q_SIZE   4096
  long   q_buf#(Q_SIZE)
  long   put_p#,get_p#
  
  gy#= pop gx#=
  if xcolor#=COLOR_CLEAR then end
  0, put_p#= get_p#=
  gx#, gy#, xget_point co#=
  if co#=xcolor# then end
  gx#, gy#, xput_pset

  xpaint1:  // うった点の座標を求める
    if get_p#=put_p# then end
    q_buf#(get_p#), vx#=   get_p#++
    q_buf#(get_p#), vy#=   get_p#++
    if get_p#&gt;=Q_SIZE then 0, get_p#=

    // うった点の四方にまた点をうつ
    vx#, 1, + vy#, xput_pset
    vx#, 1,  - vy#, xput_pset
    vy#, 1, + vx#, swap xput_pset
    vy#, 1,  -  vx#, swap xput_pset
  goto xpaint1
  
  //  点をうってその座標を記録する
  xput_pset:
    qy#= pop qx#=
    if qx#&lt;0     then end  // 範囲外ならしない
    if qx#&gt;=xwidth#  then end
    if qy#&lt;0     then end
    if qy#&gt;=xheight# then end
    qx#, qy#, xget_point co#=
    if co#=xcolor# then end // すでに点がうってあるときもしない
    qx#, qy#, xdraw_point
    qx#, q_buf#(put_p#)=  put_p#++
    qy#, q_buf#(put_p#)=  put_p#++
    if put_p#&gt;=Q_SIZE then 0, put_p#=
    end


// 画像を描画
// 使用法: gx, gy, address, xdraw_image
xdraw_image:
  qq#= pop gy#= pop gx#=
  if qq#=NULL then end
  (qq)!, rx#=
  if rx#&lt;0 then end
  if rx#&gt;=xwidth# then end
  qq#, 4, + qq#=
  (qq)!, ry#=
  if ry#&lt;0 then end
  if ry#&gt;=xheight# then end
  qq#, 4, + qq#=
  gx#, rx#, + 1, - gx1#=
  gy#, ry#, + 1, - gy1#=
  for ii#=gy# to gy1#
    for jj#=gx# to gx1#
      ii#, xwidth#, * jj#, +
      4, * bitmap#, + pp#=
      if (qq)$(3)=0 then (qq)!, (pp)!=
      qq#, 4, + qq#=
    next jj#
  next ii#
  jj#, ii#, end
    

// コピーエリアに画像をコピー
// 使用法: gx, gy, gx1, gy1, xcopy_image
xcopy_image:
  gy1#= pop gx1#= pop gy#= pop gx#=
  if gx1#&gt;=xwidth#  then xwidth#,  1, - gx1#= 
  if gy1#&gt;=xheight# then xheight#, 1, - gy1#= 
  copy_area#, qq#=
  gx1#, gx#, - 1, + (qq)!=
  qq#, 4, + qq#=
  gy1#, gy#, - 1, + (qq)!=
  qq#, 4, + qq#=
  for ii#=gy# to gy1#
    for jj#=gx# to gx1#
      ii#, xwidth#, * jj#, +
      4, * bitmap#, + pp#=
      (pp)!, (qq)!=
      qq#, 4, + qq#=
    next jj#
  next ii#
  end


// コピーエリアから貼り付ける
// 使用法: gx, gy, xpaste_image
xpaste_image:
  copy_area#, xdraw_image
  end
    

  
// 文字列描画
xdraw_string:
  long dsx#,dsy#,dsw#,dss#,dsr#
  dss#= pop dsw#= pop dsy#= pop dsx#=
  if xcolor#=COLOR_CLEAR then end
  dsx#, dsw#, + FONT_WIDTH, - dsw#=
  xdraw_string1:
    if (dss)$=NULL then end
    dsx#, dsy#, (dss)$, xdraw_font dsr#=
    dsx#, FONT_WIDTH, + dsx#=
    dss#++
  if dsx#&lt;dsw# goto xdraw_string1
  dsr#, end


// 1文字描画
xdraw_font:
  pp#= pop ty#= pop tx#=
  pp#, FONT_WIDTH, * FONT_HEIGHT, * font_area#, + qq#=
  tx#, FONT_WIDTH-1,  + rx#=
  ty#, FONT_HEIGHT-1, + ry#=
  for ii#=ty# to ry#
     for jj#=tx# to rx#
        if (qq)$&lt;&gt;0 then jj#, ii#, xdraw_point
        qq#++
     next jj#
  next ii#
  ii#, end


 .data

// 三角関数テーブル
  const TABLE_N 256 // 区分点 （全データ数＝３２１）
sin2table: // ｆ（ｘ）＝３２７６７＊ｓｉｎ（ｘ）
  data 0,804,1607,2410
  data 3211,4011,4807,5601
  data 6392,7179,7961,8739
  data 9511,10278,11038,11792
  data 12539,13278,14009,14732
  data 15446,16150,16845,17530
  data 18204,18867,19519,20159
  data 20787,21402,22004,22594
  data 23169,23731,24278,24811
  data 25329,25831,26318,26789
  data 27244,27683,28105,28510
  data 28897,29268,29621,29955
  data 30272,30571,30851,31113
  data 31356,31580,31785,31970
  data 32137,32284,32412,32520
  data 32609,32678,32727,32757
cos2table: /* ｆ（ｘ）＝３２７６７＊ｃｏｓ（ｘ） */
  data 32767,32757,32727,32678
  data 32609,32520,32412,32284
  data 32137,31970,31785,31580
  data 31356,31113,30851,30571
  data 30272,29955,29621,29268
  data 28897,28510,28105,27683
  data 27244,26789,26318,25831
  data 25329,24811,24278,23731
  data 23169,22594,22004,21402
  data 20787,20159,19519,18867
  data 18204,17530,16845,16150
  data 15446,14732,14009,13278
  data 12539,11792,11038,10278
  data 9511,8739,7961,7179
  data 6392,5601,4807,4011
  data 3211,2410,1607,804
  data 0,-805,-1608,-2411
  data -3212,-4012,-4808,-5602
  data -6393,-7180,-7962,-8740
  data -9512,-10279,-11039,-11793
  data -12540,-13279,-14010,-14733
  data -15447,-16151,-16846,-17531
  data -18205,-18868,-19520,-20160
  data -20788,-21403,-22005,-22595
  data -23170,-23732,-24279,-24812
  data -25330,-25832,-26319,-26790
  data -27245,-27684,-28106,-28511
  data -28898,-29269,-29622,-29956
  data -30273,-30572,-30852,-31114
  data -31357,-31581,-31786,-31971
  data -32138,-32285,-32413,-32521
  data -32610,-32679,-32728,-32758
  data -32767,-32758,-32728,-32679
  data -32610,-32521,-32413,-32285
  data -32138,-31971,-31786,-31581
  data -31357,-31114,-30852,-30572
  data -30273,-29956,-29622,-29269
  data -28898,-28511,-28106,-27684
  data -27245,-26790,-26319,-25832
  data -25330,-24812,-24279,-23732
  data -23170,-22595,-22005,-21403
  data -20788,-20160,-19520,-18868
  data -18205,-17531,-16846,-16151
  data -15447,-14733,-14010,-13279
  data -12540,-11793,-11039,-10279
  data -9512,-8740,-7962,-7180
  data -6393,-5602,-4808,-4012
  data -3212,-2411,-1608,-805
  data -1,804,1607,2410
  data 3211,4011,4807,5601
  data 6392,7179,7961,8739
  data 9511,10278,11038,11792
  data 12539,13278,14009,14732
  data 15446,16150,16845,17530
  data 18204,18867,19519,20159
  data 20787,21402,22004,22594
  data 23169,23731,24278,24811
  data 25329,25831,26318,26789
  data 27244,27683,28105,28510
  data 28897,29268,29621,29955
  data 30272,30571,30851,31113
  data 31356,31580,31785,31970
  data 32137,32284,32412,32520
  data 32609,32678,32727,32757
  data 32767,32757,32727,32678
  data 32609,32520,32412,32284
  data 32137,31970,31785,31580
</codetext>
</codeclip>
